%YAML 1.2
---
name: MetaPost
file_extensions:
  - mp
  - mpii
  - mpiv
scope: source.metapost
variables:
  tokens: '(?:[[:alpha:]_]+|[\:\<\=\>\|]+|[\#\&\@\$]+|[\/\*\\]+|[\+\-]+|[\!\?]+|[\^\~]+|[\{\}]+|\[+|\]+)'


contexts:
  prototype:
    - include: comment


  main:
    - include: constant
    - include: type
    - include: keyword
    - include: internal-parameter
    - include: operator
    - include: punctuation
    - include: function
    - include: definition
    - include: environment
    - include: TeX


  comment:
    - match: '(%).*$\n?'
      captures:
        '0': comment.line.percentage.metapost
        '1': punctuation.definition.comment.metapost


  constant:
    - include: constant.numeric
    - include: constant.string
    - include: constant.language

  constant.numeric:
    - match: '([[:digit:]]*\.[[:digit:]]+)((bp|cc|cm|dd|pc|in|mm|pt)\b)?'
      captures:
        '1': constant.numeric.metapost
        '2': keyword.other.unit.metapost
    - match: '([[:digit:]]+)((bp|cc|cm|dd|pc|in|mm|pt)\b)?'
      captures:
        '1': constant.numeric.metapost
        '2': keyword.other.unit.metapost
    - match: '\b(bp|cc|cm|dd|pc|in|mm|pt)\b'
      scope: keyword.other.unit.metapost

  constant.string:
    - match: '"'
      scope: punctuation.definition.string.begin.metapost
      push: constant.string.main/
  constant.string.main/:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.metapost
    - match: '"'
      scope: punctuation.definition.string.end.metapost
      pop: true
    - match: '\n'
      scope: invalid.illegal.unclosed-string.metapost
      pop: true
    - match: '%%'
      scope: constant.character.escape.percentage.metapost
    - match: '%(j|[[:digit:]]?[cymdHM]|)'
      scope: constant.other.placeholder.metapost

  constant.language:
    - match: '\b(beveled|black|blue|butt|ditto|down|EOF|eps(ilon)?|evenly|false|green|(full|half|quarter)circle|identity|infinity|left|mitered|mpversion|null(pen|picture)|blankpicture|origin|pen(circle|square|razor|speck)|pi|red|right|rounded|squared|true|unitsquare|up|white|withdots)\b'
      scope: constant.language.metapost


  punctuation:
    - match: ';'
      scope: punctuation.terminator.semicolon.metapost
    - match: ':'
      scope: punctuation.separator.colon.metapost


  type:
    - match: '\b(boolean|(rgb|cmyk)?color|numeric|pair|path|pen|picture|string|transform)\b'
      scope: storage.type.metapost
    - match: '\b(save|interim|newinternal)\b'
      scope: storage.modifier.metapost


  keyword:
    - include: keyword.control

  keyword.control:
    - match: '\b(if|else(if)?|fi|for(suffixes|ever)?|within|(up|down)to|step|until|exit(if|unless)|endfor)\b'
      scope: keyword.control.conditional.metapost


  internal-parameter:
    - match: '\b(ah(angle|length)|background|bboxmargin|charcode|current(pen|picture)|cuttings|day|default(colormodel|font|pen|scale)|dotlabeldiam|extra_(begin|end)fig|hour|hppp|jobname|join_radius|labeloffset|line(cap|join)|minute|miterlimit|month|mpprocset|number(precision|system)|output(filename|format|formatoptions|template)|pausing|prologues|restoreclipcolor|showstopping|time|tolerance|tracing(capsules|choices|commands|equations|lostchars|macros|online|output|restores|specs|stats|titles)|troffmode|truecorners|vppp|warningcheck|year|randomseed)\b'
      scope: variable.language.metapost


  operator:
    - include: operator.word
    - include: operator.symbol

  operator.word:
    - match: '\b(and|atleast|controls|curl|cut(after|before|ends)|dashed|div|dotprod|glyph|infont|intersection(point|times)|mod|not|of|or|off|on|reflectedabout|rotated(around)?|scaled|shifted|slanted|softjoin|tension|to|transformed|with((cmyk|grey|out|rgb)?color|gray|greyscale|(pre|post)script|pen)|[xyz]scaled)\b'
      scope: keyword.operator.word.metapost

  operator.symbol:
    - match: '[\.\-]{2,3}'
      scope: keyword.operator.metapost
    - match: '([:<>]?=|<>|\+\-\+|[*+]{2}|[<>&*/+-])'
      scope: keyword.operator.metapost


  function:
    - include: function.dashpattern
    - include: function.input
    - include: function.labels
    - include: function.generic
    - include: function.parameter

  function.dashpattern:
    - match: '\bdashpattern\b'
      scope: support.function.metapost
    # push: argument.parens.with-on-off*/

  function.input:
    - match: '\binput\b'
      scope: support.function.metapost
      push: argument.string-or-file-name*/

  function.labels:
    - match: '\b(thelabel|(dot)?labels?)(\.(top|[ul]?(lft|rt)|bot))?\b'
      scope: support.function.metapost

  function.generic:
    - match: '\b(abs|addto|also|angle|arclength|arctime|ASCII|byte|batchmode|bbox|(sin|cos)d|bounded|buildcycle|ceiling|center|char|clip|clipped|closefrom|colormodel|contour|counterclockwise|cutdraw|decimal|decr|dir|direction(point|time)?|doublepath|draw(arrow|dblarrow|dot|fill|options)?|err(help|message)|(scroll|(error|non)stop)mode|filenametemplate|fill(draw)?|filled|flex|floor|fontmap(file|line)|fontsize|hex|hide|image|incr|interpath|inverse|known|length|loggingall|makepath|makepen|max|message|mexp|min|mlog|(normal|uniform)deviate|oct|odd|pickup|penoffset|point|(post|pre)control|readfrom|reverse|round|scantokens|setbounds|shipout|show(dependencies|token|variable)?|special|sqrt|str|stroked|sub(path|string)|superellipse|tensepath|textual|turningnumber|(top|bot|lft|rt)|tracing(all|none)|un(draw(dot|fill)?|fill(draw)?)|unitvector|unknown|[ul][rl]corner|write|(black|blue|color|cyan|dash|font|green|grey|magenta|yellow|path|pen|red|text|[xy]{1,2})part)\b'
      scope: support.function.metapost
    - match: '\b(cycle|whatever)\b'
      scope: support.function.metapost

  function.parameter:
    - match: '@\#'
      scope: variable.parameter.suffix.metapost


  definition:
    - include: definition.def
    - include: definition.binarydef
    - include: definition.end
    - include: definition.let

  definition.def:
    - match: '\b(var)?def\b'
      scope: storage.type.metapost
      push: [
        definition.main/,
        argument.name.definition*/,
      ]

  definition.main/:
    - include: argument.equals/
    - match: '\b(expr|suffix|of|text|primary)\b'
      scope: storage.modifier.metapost
    - match: '{{tokens}}'
      scope: variable.parameter.metapost

  definition.end:
    - match: '\benddef\b'
      scope: storage.type.metapost

  definition.let:
    - match: '\blet\b'
      scope: storage.type.metapost
      push: [
        argument.name*/,
        argument.equals*/,
        argument.name.definition*/,
      ]

  definition.binarydef:
    - match: '\b(primary|secondary|tertiary)def\b'
      scope: storage.type.metapost
      push: [
        argument.equals*/,
        argument.name.variable*/,
        argument.name.definition*/,
        argument.name.variable*/,
      ]


  environment:
    - include: environment.fig
    - include: environment.group

  environment.fig:
    - match: '\bbeginfig\b'
      scope: support.function.metapost
      push: argument.parens.figure*/

  environment.group:
    - match: '\b(begin|end)group\b'
      scope: support.function.metapost
    - match: '\bendfig\b'
      scope: support.function.metapost
    - match: '\b(end(input)?|bye)\b'
      scope: support.function.metapost


  TeX:
    - match: '\b(b|verbatim)tex\b'
      scope: support.function.metapost
      push: TeX.main/
    - match: '\betex\b'
      scope: support.function.metapost
  TeX.main/:
    - meta_content_scope: text.tex.embedded.metapost
    - match: '(?=\betex\b)'
      pop: true
    - include: scope:text.tex#main


  argument.parens.figure/:
    - match: '\('
      scope: punctuation.section.parens.begin.metapost
      set: argument.parens.figure.main/
  argument.parens.figure*/:
    - include: argument.parens.figure/
    - include: generic.pop-if-no-nearby-parens/
  argument.parens.figure.main/:
    - meta_scope: meta.parens.metapost
    - meta_content_scope: entity.name.section.metapost
    - include: generic.pop-at-parens-end/
    - include: constant.numeric

  argument.string-or-file-name/:
    - include: generic.gobble-whitespace
    - match: '"'
      scope: punctuation.definition.string.begin.metapost
      set: constant.string.main/
    - match: ''
      set: argument.name.file/
  argument.string-or-file-name*/:
    - include: argument.string-or-file-name/
    - include: generic.gobble-whitespace-or-pop/

  argument.equals/:
    - match: '='
      scope: keyword.operator.assignment.metapost
      pop: true
  argument.name/:
    - match: '{{tokens}}'
      pop: true
  argument.name.file/:
    - include: argument.name/
  argument.name.definition/:
    - match: '{{tokens}}'
      scope: entity.name.function.metapost
      pop: true
  argument.name.variable/:
    - match: '{{tokens}}'
      scope: variable.parameter.metapost
      pop: true

  argument.equals*/:
    - include: argument.equals/
    - include: generic.gobble-whitespace-or-pop/
  argument.name*/:
    - include: argument.name/
    - include: generic.gobble-whitespace-or-pop/
  argument.name.file*/:
    - include: argument.name.file/
    - include: generic.gobble-whitespace-or-pop/
  argument.name.definition*/:
    - include: argument.name.definition/
    - include: generic.gobble-whitespace-or-pop/
  argument.name.variable*/:
    - include: argument.name.variable/
    - include: generic.gobble-whitespace-or-pop/


  generic.gobble-whitespace:
    - match: '\s+'
  generic.gobble-whitespace-or-pop-if-blank-line/:
    - include: generic.pop-if-blank-line/
    - include: generic.gobble-whitespace
  generic.gobble-whitespace-or-pop/:
    - include: generic.gobble-whitespace-or-pop-if-blank-line/
    - include: generic.pop/

  generic.pop-if-no-nearby-parens/:
    - include: generic.gobble-whitespace-or-pop-if-blank-line/
    - include: generic.pop-if-no-parens/

  generic.pop-if-blank-line/:
    - match: '(?=^\s*$\n?)'
      pop: true
  generic.pop-if-no-parens/:
    - match: '(?=[^\(])'
      pop: true
  generic.pop/:
    - match: ''
      pop: true

  generic.pop-at-parens-end/:
    - match: '\)'
      scope: punctuation.section.parens.end.context
      pop: true
