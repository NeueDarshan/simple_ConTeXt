%YAML 1.2
---
name: ConTeXt
file_extensions:
  - tex
  - mkii
  - mkiv
  - mkvi
  - mkix
  - mkxi
scope: text.tex.context
first_line_match: '^(%.*?macros\s*=\s*mk([vx]i|i[vx])|\s*\\(starttext|usemodule))\b'

contexts:
  prototype:
    - include: comment

  main:
    - include: math
    - include: Lua
    - include: MetaFun
    - include: templates
    - include: ConTeXt
    - include: TeX
    - include: control
    - include: generic.group

  comment:
    - include: comment.TeX

  comment.TeX:
    - match: '(%).*$\n?'
      captures:
        '0': comment.line.percentage.context
        '1': punctuation.definition.comment.context

  math:
   - include: math.display
   - include: math.inline

  math.display:
    - match: '\$\$'
      scope: punctuation.section.dollars.begin.context
      push:
        - meta_content_scope: meta.environment.math.block.context
        - match: '\$\$'
          scope: punctuation.section.dollars.end.context
          pop: true
        - include: math.main
    - match: '(\\)startformula\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        math.display.formula.main/,
        generic.list*/,
      ]
    - match: '(\\)start(display|d)math\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: meta.environment.math.block.context
        - match: '(?=\\stop\2math\b)'
          pop: true
        - include: math.main
    - match: '(\\)display(math|mathematics)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: math.group.display*/

  math.display.formula.main/:
    - match: ''
      set:
        - meta_content_scope: meta.environment.math.block.context
        - match: '(?=\\stopformula\b)'
          pop: true
        - include: math.main

  math.inline:
    - match: '\$'
      scope: punctuation.section.dollar.begin.context
      push:
        - meta_content_scope: meta.environment.math.inline.context
        - match: '\$'
          scope: punctuation.section.dollar.end.context
          pop: true
        - include: math.main
    - match: '(\\)(m|math|mathematics|formula)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        math.group.inline*/,
        generic.list*/,
      ]
    - match: '(\\)inline(math|mathematics)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: math.group.inline*/
    - match: '(\\)start(imath|mathmode)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: meta.environment.math.inline.context
        - match: '(?=\\stop\2\b)'
          pop: true
        - include: math.main

  math.group.inline/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: math.group.inline.main/
  math.group.inline*/:
    - include: math.group.inline/
    - include: generic.pop-if-no-nearby-group/
  math.group.inline.main/:
    - meta_scope: meta.braces.context
    - meta_content_scope: meta.environment.math.inline.context
    - include: generic.pop-at-group-end/
    - include: math.main

  math.group.display/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: math.group.display.main/
  math.group.display*/:
    - include: math.group.display/
    - include: generic.pop-if-no-nearby-group/
  math.group.display.main/:
    - meta_scope: meta.braces.context
    - meta_content_scope: meta.environment.math.block.context
    - include: generic.pop-at-group-end/
    - include: math.main

  math.main:
    - include: math.number
    - include: math.operator
    - include: math.variable
    - include: math.control.sequence
    - include: math.group.inner
    - include: TeX.parameter
    - include: templates

  math.number:
    - match: '∞'
      scope: constant.numeric.context
    - match: '(\\)infty\b'
      captures:
        '0': constant.other.math.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
    - include: generic.real

  math.operator:
    - match: '([\+\-\*/=\^_<>])'
      scope: keyword.operator.math.context
    - match: '[⋅±∓≤≥≃≈≠≡≅≢→∊∈∉∍∋∌⊂⊄⊃⊅⊆⊊⊈⊇⊋⊉]'
      scope: keyword.operator.math.context
    - match: '(\\)([lgn]e|[lg]e(q|qslant)|cdot|(maps)?to|(n|not)?(in|ni)|owns|n?su[bp]set(eq)?|su[bp]setneq|ll|gg|pm|mp|n?equiv|n?eq|cong|simeq|approx|setminus|times|div(ides)?)\b'
      captures:
        '0': keyword.operator.math.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context

  math.variable:
    - match: '[[:alpha:]]'
      scope: variable.other.math.tex.context

  math.group.inner:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      push:
        - meta_scope: meta.braces.context
        - include: generic.pop-at-group-end/
        - include: math.main

  math.control.sequence:
    - include: Lua
    - include: math.control.cases
    - include: math.control.intertext
    - include: math.control.start-stop
    - include: math.control.generic
    - include: math.control.symbol

  math.control.symbol:
    - include: control.symbol

  math.control.generic:
    - include: control.word.without-generic
    - include: control.word.generic.no-arguments

  math.control.intertext:
    - match: '(\\)startintertext\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - match: '(?=\\stopintertext\b)'
          pop: true
        - include: main
    - match: '(\\)(inter)?text\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.group*/

  math.control.start-stop:
    - match: '(\\)start[[:alpha:]]+'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.lists-or-groups*/

  math.control.cases:
    - match: '(\\)startcases\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        math.control.cases.main/,
        generic.list*/,
      ]

  math.control.cases.main/:
    - include: math.control.cases.pop-at-end/
    - include: math.control.cases.rows
    - include: math.main

  math.control.cases.pop-at-end/:
    - match: '(?=\\stopcases\b)'
      pop: true

  math.control.cases.rows:
    - match: '(\\)NC\b'
      captures:
        '0': keyword.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - match: '(\\)NC\b'
          captures:
            '0': keyword.other.alignment.context meta.other.control.word.context
            '1': punctuation.definition.backslash.context
          set: math.control.cases.text/
        - match: '(\\)MC\b'
          captures:
            '0': keyword.other.alignment.context meta.other.control.word.context
            '1': punctuation.definition.backslash.context
          set: math.control.cases.math/
        - include: math.control.cases.pop-if-newrow/
        - include: math.control.cases.pop-at-end/
        - include: math.main

  math.control.cases.text/:
    - include: math.control.cases.pop-if-newrow/
    - include: math.control.cases.pop-at-end/
    - include: main
  math.control.cases.math/:
    - include: math.control.cases.pop-if-newrow/
    - include: math.control.cases.pop-at-end/
    - include: math.main
  math.control.cases.pop-if-newrow/:
    - match: '(\\)NR\b'
      captures:
        '0': keyword.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      set: generic.list.adjacent*/

  Lua:
    - include: Lua.block
    - include: Lua.inline

  Lua.block:
    - match: '(\\)startluacode\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_include_prototype: false
        - meta_content_scope: source.lua.embedded.context meta.other.major.lua
        - match: '(?=\\stopluacode\b)'
          pop: true
        - include: Lua.main
    - match: '(\\)startlua\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: source.lua.embedded.context meta.other.minor.lua
        - match: '(?=\\stoplua\b)'
          pop: true
        - include: Lua.main

  Lua.inline:
    - match: '(\\)((ctx|direct)lua|cldcontext)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: Lua.group.inline*/

  Lua.group.inline/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context meta.braces.context
      set: Lua.group.inline.main/
  Lua.group.inline*/:
    - include: Lua.group.inline/
    - include: generic.pop-if-no-nearby-group/
  Lua.group.inline.main/:
    - match: ''
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: source.lua.embedded.context meta.other.minor.lua
        - include: generic.pop-at-group-end/
        - include: Lua.group.dummy
        - include: Lua.main
  Lua.group.dummy:
    - match: '\{'
      push:
        - match: '\}'
          pop: true
        - include: Lua.group.dummy
        - include: Lua.main

  Lua.main:
    - include: templates
    - include: Lua.comment.embed-friendly
    - include: scope:source.lua
    - include: Lua.control.sequence

  Lua.control.sequence:
    - include: control.symbol
    - include: control.word.generic

  Lua.comment.embed-friendly:
    - match: '--(?!\[\[)'
      scope: punctuation.definition.comment.lua
      push:
        - meta_scope: comment.line.double-dash.lua
        - match: '$\n?'
          pop: true

  MetaFun:
    - include: MetaFun.block
    - include: MetaFun.use

  MetaFun.use:
    - match: '(\\)(re)?useMPgraphic\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        generic.group.with-assignments*/,
        generic.group*/,
      ]

  MetaFun.block:
    - match: '(\\)startuniqueMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.uniqueMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startuniqueMPpagegraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.uniqueMPpagegraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startuseMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.useMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startusableMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.usableMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startreusableMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.reusableMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startstaticMPfigure\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.staticMPfigure.core/, generic.group*/]
    - match: '(\\)startMPcode\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPcode.core/, generic.group*/]
    - match: '(\\)startMPdefinitions\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPdefinitions.core/, generic.group*/]
    - match: '(\\)startMPinclusions\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPinclusions.core/, generic.group*/, generic.list*/]
    - match: '(\\)startMPextensions\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPextensions.core/, generic.group*/]
    - match: '(\\)startMPpage\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPpage.core/, generic.list*/]

  MetaFun.block.MPcode.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPcode\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.MPpage.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPpage\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.uniqueMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopuniqueMPgraphic\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.uniqueMPpagegraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopuniqueMPpagegraphic\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.useMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopuseMPgraphic\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.usableMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopusableMPgraphic\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.reusableMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopreusableMPgraphic\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.staticMPfigure.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopstaticMPfigure\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.MPdefinitions.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPdefinitions\b)'
          pop: true
        - include: MetaFun.main
  MetaFun.block.MPinclusions.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPinclusions\b)'
          pop: true
        - include: MetaFun.main

  MetaFun.main:
    - include: templates
    - include: MetaFun.TeX
    - include: scope:source.metapost.metafun
    - include: MetaFun.control.sequence

  MetaFun.control.sequence:
    # - include: Lua
    - include: control.symbol
    - include: control.word.generic

  MetaFun.TeX:
    - match: '\b(b|verbatim)tex\b'
      scope: entity.name.other.tex.metapost
      push:
        - meta_content_scope: text.tex.context.embedded.metafun
        - match: '(?=\betex\b)'
          pop: true
        - include: main

  templates:
    - match: '(<\?)(lua)\b'
      captures:
        '1': punctuation.definition.tag.begin.context
        '2': entity.name.tag.lua.context
      push:
        - meta_include_prototype: false
        # - meta_scope: meta.preprocessor.lua.context meta.tag.lua.context
        - meta_content_scope: source.lua.embedded.context
        - match: '\?>'
          scope: punctuation.definition.tag.end.context
          pop: true
        - include: templates.main

  templates.main:
    - include: templates.Lua.functions
    - include: scope:source.lua
  templates.Lua.functions:
    - match: '\b(inject)\b'
      scope: support.function.lua

  ConTeXt:
    - include: ConTeXt.comments
    - include: ConTeXt.setups
    - include: ConTeXt.headings
    - include: ConTeXt.verbatim
    - include: ConTeXt.quotes
    - include: ConTeXt.font.delimited
    - include: ConTeXt.tables

  ConTeXt.comments:
    - match: '(\\)starthiding\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: comment.block.hiding.context
        - match: '(?=\\stophiding\b)'
          pop: true

  ConTeXt.setups:
    - include: ConTeXt.setups.Lua

  ConTeXt.setups.Lua:
    - match: '(\\)startluasetups\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - include: generic.gobble-whitespace
        - match: '(?=\[)'
          set: [
            ConTeXt.setups.Lua.main/,
            generic.list*/,
            generic.list*/,
          ]
        - match: ''
          set: [
            ConTeXt.setups.Lua.main/,
            ConTeXt.setups.Lua.name*/,
          ]

  ConTeXt.setups.Lua.name*/:
    - match: '[[:alpha:][:digit:]\.\-:_]+'
      scope: meta.other.setup.name.context
      pop: true
    - include: generic.gobble-whitespace
    - include: generic.pop/

  ConTeXt.setups.Lua.main/:
    - match: ''
      set:
        - meta_include_prototype: false
        - meta_content_scope: source.lua.embedded.context
        - match: '(?=\\stopluasetups\b)'
          pop: true
        - include: Lua.main

  ConTeXt.headings:
    - include: ConTeXt.headings.inline
    - include: ConTeXt.headings.block

  ConTeXt.headings.inline:
    - match: '(\\)part\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.group.headings.part*/, ConTeXt.list.headings.reference*/]
    - match: '(\\)(chapter|title)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.group.headings.chapter*/, ConTeXt.list.headings.reference*/]
    - match: '(\\)(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.group.headings.section*/, ConTeXt.list.headings.reference*/]
    - match: '(\\)sub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.group.headings.subsection*/, ConTeXt.list.headings.reference*/]
    - match: '(\\)subsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.deficontext.nition.backslash}
      push: [ConTeXt.group.headings.sub2section*/, ConTeXt.list.headings.reference*/]
    - match: '(\\)subsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.group.headings.sub3section*/, ConTeXt.list.headings.reference*/]
    - match: '(\\)subsubsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.group.headings.sub4section*/, ConTeXt.list.headings.reference*/]

  ConTeXt.list.headings.reference/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: ConTeXt.list.headings.reference.core/
  ConTeXt.list.headings.reference*/:
    - include: ConTeXt.list.headings.reference/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.reference.core/:
    - meta_scope: meta.brackets.context
    - meta_content_scope: meta.other.reference.context
    - include: generic.pop-at-list-end/
    - include: main

  ConTeXt.group.headings.part*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.part.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.headings.chapter*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.chapter.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.headings.section*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.section.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.headings.subsection*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.subsection.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.headings.sub2section*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.subsubsection.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.headings.sub3section*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.subsubsubsection.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.headings.sub4section*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: meta.other.title.context entity.name.headings.subsubsubsubsection.context
        - include: ConTeXt.group.headings.common/
    - include: generic.pop-if-no-nearby-group/

  ConTeXt.group.headings.common/:
    - include: generic.pop-at-group-end/
    - include: main

  ConTeXt.headings.block:
    - match: '(\\)startpart\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.part*/]
    - match: '(\\)start(chapter|title)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.chapter*/]
    - match: '(\\)start(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.section*/]
    - match: '(\\)startsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.subsection*/]
    - match: '(\\)startsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.sub2section*/]
    - match: '(\\)startsubsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.sub3section*/]
    - match: '(\\)startsubsubsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.list.headings.sub4section*/]

  ConTeXt.list.headings.part*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.part.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.chapter*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.chapter.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.section*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.section.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.subsection*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.subsection.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.sub2section*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.subsubsection.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.sub3section*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.subsubsubsection.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.headings.sub4section*/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context meta.other.title.context entity.name.headings.subsubsubsubsection.context
            - include: ConTeXt.list.headings.common/
        - include: generic.list.main/
    - include: generic.pop-if-no-nearby-list/

  ConTeXt.list.headings.common/:
    - include: generic.list.pop-at-end-of-assignment/
    - include: main

  ConTeXt.verbatim:
    - include: ConTeXt.verbatim.inline
    - include: ConTeXt.verbatim.block
    - include: ConTeXt.verbatim.buffer

  ConTeXt.verbatim.inline:
    - match: '(\\)type?\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.group-or-angles.verbatim*/,
        generic.list*/,
      ]
    - match: '(\\)tex\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: ConTeXt.group.verbatim*/

  ConTeXt.group-or-angles.verbatim*/:
    - include: ConTeXt.group.verbatim/
    - include: ConTeXt.angles.verbatim/
    - include: ConTeXt.pop-if-no-nearby-group-or-angles/

  ConTeXt.pop-if-no-nearby-group-or-angles/:
    - include: generic.pop-if-blank-line/
    - include: generic.gobble-whitespace
    - include: ConTeXt.pop-if-no-group-or-angles/
  ConTeXt.pop-if-no-group-or-angles/:
    - match: '(?=[^\{<])'
      pop: true

  ConTeXt.group.verbatim/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: ConTeXt.group.verbatim.main/
  ConTeXt.group.verbatim*/:
    - include: ConTeXt.group.verbatim/
    - include: generic.pop-if-no-nearby-group/
  ConTeXt.group.verbatim.main/:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.block.context #markup.raw.inline.context
    - meta_scope: meta.braces.context
    - include: generic.pop-at-group-end/
    - include: ConTeXt.group.verbatim.dummy

  ConTeXt.angles.verbatim/:
    - match: '<<'
      scope: punctuation.section.angles.begin.context
      set: ConTeXt.angles.verbatim.main/
  ConTeXt.angles.verbatim.main/:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.block.context #markup.raw.inline.context
    - meta_scope: meta.angles.context
    - match: '>>'
      scope: punctuation.section.angles.end.context
      pop: true
    - include: ConTeXt.angles.verbatim.dummy

  ConTeXt.group.verbatim.dummy:
    - match: '\{'
      push:
        - meta_include_prototype: false
        - match: '\}'
          pop: true
        - include: ConTeXt.group.verbatim.dummy
  ConTeXt.angles.verbatim.dummy:
    - match: '<<'
      push:
        - meta_include_prototype: false
        - match: '>>'
          pop: true
        - include: ConTeXt.angles.verbatim.dummy

  ConTeXt.verbatim.block:
    - match: '(\\)starttyping\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.verbatim.block.main/,
        generic.list*/,
      ]
  ConTeXt.verbatim.block.main/:
    - match: ''
      set:
        - meta_include_prototype: false
        - meta_content_scope: markup.raw.block.context
        - match: '(?=\\stoptyping\b)'
          pop: true

  ConTeXt.verbatim.buffer:
    - match: '(\\)startbuffer\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.verbatim.buffer.main/,
        generic.list*/,
      ]
  ConTeXt.verbatim.buffer.main/:
    - match: ''
      set:
        - meta_include_prototype: false
        - meta_content_scope: meta.other.buffer.context #markup.raw.block.context
        - match: '(?=\\stopbuffer\b)'
          pop: true

  ConTeXt.quotes:
    - include: ConTeXt.quotes.inline
    - include: ConTeXt.quotes.block

  ConTeXt.quotes.inline:
    - match: '(\\)(quote|blockquote|quotation)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.group.quotes*/,
        generic.list*/,
      ]

  ConTeXt.group.quotes/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: markup.quote.inline.context
        - include: generic.pop-at-group-end/
        - include: main
  ConTeXt.group.quotes*/:
    - include: ConTeXt.group.quotes/
    - include: generic.pop-if-no-nearby-group/

  ConTeXt.quotes.block:
    - match: '(\\)startblockquote\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.quotes.blockquote.main/, generic.list*/, generic.list*/]
    - match: '(\\)startquote\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.quotes.quote.main/, generic.list*/]
    - match: '(\\)startquotation\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.quotes.quotation.main/, generic.list*/, generic.list*/]

  ConTeXt.quotes.blockquote.main/:
    - match: ''
      set:
        - meta_content_scope: markup.quote.block.context
        - match: '(?=\\stopblockquote\b)'
          pop: true
        - include: main
  ConTeXt.quotes.quote.main/:
    - match: ''
      set:
        - meta_content_scope: markup.quote.block.context
        - match: '(?=\\stopquote\b)'
          pop: true
        - include: main
  ConTeXt.quotes.quotation.main/:
    - match: ''
      set:
        - meta_content_scope: markup.quote.block.context
        - match: '(?=\\stopquotation\b)'
          pop: true
        - include: main

  ConTeXt.font.delimited:
    - include: ConTeXt.font.delimited.emphasis
    - include: ConTeXt.font.delimited.boldface
    - include: ConTeXt.font.delimited.italic
    - include: ConTeXt.font.delimited.slanted
    - include: ConTeXt.font.delimited.bold-italic
    - include: ConTeXt.font.delimited.bold-slanted
    - include: ConTeXt.font.delimited.sans-bold
    - include: ConTeXt.font.delimited.typewriter
    - include: ConTeXt.font.delimited.typewriter-bold

  ConTeXt.font.delimited.emphasis:
    - match: '((\\)emph)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.emphasis.main/
  ConTeXt.font.delimited.boldface:
    - match: '((\\)(small)?bold)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '4': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.boldface.main/
  ConTeXt.font.delimited.italic:
    - match: '((\\)italic)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.italic.main/
  ConTeXt.font.delimited.slanted:
    - match: '((\\)(small)?slanted)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '4': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.slanted.main/
  ConTeXt.font.delimited.bold-italic:
    - match: '((\\)(small)?(bolditalic|italicbold))\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '5': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.bold-italic.main/
  ConTeXt.font.delimited.bold-slanted:
    - match: '((\\)(small)?(boldslanted|slantedbold))\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '5': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.bold-slanted.main/
  ConTeXt.font.delimited.sans-bold:
    - match: '((\\)sansbold)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.sans-bold.main/
  ConTeXt.font.delimited.typewriter:
    - match: '((\\)mono)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.typewriter.main/
  ConTeXt.font.delimited.typewriter-bold:
    - match: '((\\)monobold)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.group.font.typewriter-bold.main/

  ConTeXt.group.font.toggle:
    - include: ConTeXt.group.font.toggle.emphasis
    - include: ConTeXt.group.font.toggle.boldface
    - include: ConTeXt.group.font.toggle.italic
    - include: ConTeXt.group.font.toggle.slanted
    - include: ConTeXt.group.font.toggle.bold-italic
    - include: ConTeXt.group.font.toggle.bold-slanted
    - include: ConTeXt.group.font.toggle.sans-bold
    - include: ConTeXt.group.font.toggle.typewriter
    - include: ConTeXt.group.font.toggle.typewriter-bold

  ConTeXt.group.font.toggle.emphasis:
    - match: '((\\)(emph|em))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.emphasis.main/
  ConTeXt.group.font.toggle.boldface:
    - match: '((\\)(boldface|(small)?bold|bf(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.boldface.main/
  ConTeXt.group.font.toggle.italic:
    - match: '((\\)(italic|it(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.italic.main/
  ConTeXt.group.font.toggle.slanted:
    - match: '((\\)((small)?slanted|sl(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.slanted.main/
  ConTeXt.group.font.toggle.bold-italic:
    - match: '((\\)((small)?(bolditalic|italicbold)|bi(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.bold-italic.main/
  ConTeXt.group.font.toggle.bold-slanted:
    - match: '((\\)((small)?(boldslanted|slantedbold)|bs(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.bold-slanted.main/
  ConTeXt.group.font.toggle.sans-bold:
    - match: '((\\)sansbold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.sans-bold.main/
  ConTeXt.group.font.toggle.typewriter:
    - match: '((\\)(mono|tt(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.typewriter.main/
  ConTeXt.group.font.toggle.typewriter-bold:
    - match: '((\\)monobold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.group.font.typewriter-bold.main/

  ConTeXt.group.font.emphasis.main/:
    - meta_content_scope: meta.braces.context markup.italic.emphasis.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.boldface.main/:
    - meta_content_scope: meta.braces.context markup.bold.boldface.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.italic.main/:
    - meta_content_scope: meta.braces.context markup.italic.italic.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.slanted.main/:
    - meta_content_scope: meta.braces.context markup.italic.slanted.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.bold-italic.main/:
    - meta_content_scope: meta.braces.context markup.italic.italic.context markup.bold.boldface.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.bold-slanted.main/:
    - meta_content_scope: meta.braces.context markup.italic.slanted.context markup.bold.boldface.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.sans-bold.main/:
    - meta_content_scope: meta.braces.context markup.bold.boldface.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.typewriter.main/:
    - meta_content_scope: meta.braces.context markup.raw.block.context # markup.raw.typewriter.context
    - include: ConTeXt.group.font.main/
  ConTeXt.group.font.typewriter-bold.main/:
    - meta_content_scope: meta.braces.context markup.bold.boldface.context markup.raw.block.context # markup.raw.typewriter.context
    - include: ConTeXt.group.font.main/

  ConTeXt.group.font.main/:
    - match: '\}'
      scope: meta.braces.context punctuation.section.braces.end.context
      pop: true
    - include: generic.group.main/

  ConTeXt.tables:
    - include: ConTeXt.table
    - include: ConTeXt.tabulate
    - include: ConTeXt.TABLE
    - include: ConTeXt.alt-TABLE
    - include: ConTeXt.tables.misc

  ConTeXt.table:
    - match: '(\\)starttable\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.table.main/, generic.list*/, ConTeXt.list.template-or-name*/]
  ConTeXt.tabulate:
    - match: '(\\)starttabulate\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.tabulate.main/, generic.list*/, ConTeXt.list.template-or-name*/]
  ConTeXt.TABLE:
    - match: '(\\)startTABLE\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.TABLE.main/, generic.list*/]
  ConTeXt.alt-TABLE:
    - match: '(\\)bTABLE\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.alt-TABLE.main/, generic.list*/]
  ConTeXt.tables.misc:
    - match: '(\\)(REF|ReFormat)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.group*/, ConTeXt.list.template*/]
    - match: '(\\)Use\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.group*/, ConTeXt.list.template*/, generic.group.with-integers*/]

  ConTeXt.table.main/:
    - meta_content_scope: markup.other.table.context
    - match: '(\\)([BCHNMR]C|[CV]L|CM|CR|CT)\b'
      captures: {'0': keyword.other.alignment.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push:
        - meta_content_scope: meta.other.table.cell.context
        - include: ConTeXt.tables.cell.main/
        - include: ConTeXt.table.pop-at-end/
    - include: ConTeXt.table.pop-at-end/
    - include: main
  ConTeXt.tabulate.main/:
    - meta_content_scope: markup.other.table.context
    - match: '(\\)([BCHNMR]C|[CV]L|CM|CR|CT)\b'
      captures: {'0': keyword.other.alignment.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push:
        - meta_content_scope: meta.other.table.cell.context
        - include: ConTeXt.tables.cell.main/
        - include: ConTeXt.tabulate.pop-at-end/
    - include: ConTeXt.tabulate.pop-at-end/
    - include: main
  ConTeXt.TABLE.main/:
    - meta_content_scope: markup.other.table.context
    - match: '(\\)([BCHNMR]C|[CV]L|CM|CR|CT)\b'
      captures: {'0': keyword.other.alignment.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push:
        - meta_content_scope: meta.other.table.cell.context
        - include: ConTeXt.tables.cell.main/
        - include: ConTeXt.TABLE.pop-at-end/
    - include: ConTeXt.TABLE.pop-at-end/
    - include: main

  ConTeXt.tables.cell.main/:
    - include: ConTeXt.tables.cell.fonts
    - include: ConTeXt.tables.pop-at-cell-end/
    - include: main

  ConTeXt.table.pop-at-end/:
    - match: '(?=\\stoptable\b)'
      pop: true
  ConTeXt.tabulate.pop-at-end/:
    - match: '(?=\\stoptabulate\b)'
      pop: true
  ConTeXt.TABLE.pop-at-end/:
    - match: '(?=\\stopTABLE\b)'
      pop: true
  ConTeXt.tables.pop-at-cell-end/:
    - match: '(?=\\(NB|[BCHNMR]C|ND|NG|[BCFHLMTV]L|CM|NN|[EHR]Q|[ACFHLMNS]R|CT)\b)'
      pop: true

  ConTeXt.tables.cell.fonts:
    - include: ConTeXt.tables.cell.emphasis
    - include: ConTeXt.tables.cell.boldface
    - include: ConTeXt.tables.cell.italic
    - include: ConTeXt.tables.cell.slanted
    - include: ConTeXt.tables.cell.bold-italic
    - include: ConTeXt.tables.cell.bold-slanted
    - include: ConTeXt.tables.cell.sans-bold
    - include: ConTeXt.tables.cell.typewriter
    - include: ConTeXt.tables.cell.typewriter-bold

  ConTeXt.tables.cell.emphasis:
    - match: '((\\)(emph|em))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.emphasis.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.boldface:
    - match: '((\\)(boldface|(small)?bold|bf(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.bold.boldface.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.italic:
    - match: '((\\)(italic|it(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.italic.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.slanted:
    - match: '((\\)((small)?slanted|sl(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.slanted.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.bold-italic:
    - match: '((\\)((small)?(bolditalic|italicbold)|bi(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.italic.context markup.bold.boldface.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.bold-slanted:
    - match: '((\\)((small)?(boldslanted|slantedbold)|bs(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.slanted.context markup.bold.boldface.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.sans-bold:
    - match: '((\\)sansbold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.bold.boldface.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.typewriter:
    - match: '((\\)(mono|tt(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.raw.block.context # markup.raw.typewriter.context
        - include: ConTeXt.tables.cell.font.core/
  ConTeXt.tables.cell.typewriter-bold:
    - match: '((\\)monobold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.bold.boldface.context markup.raw.block.context # markup.raw.typewriter.context
        - include: ConTeXt.tables.cell.font.core/

  ConTeXt.tables.cell.font.core/:
    - include: ConTeXt.tables.pop-at-cell-end/
    - include: ConTeXt.table.pop-at-end/
    - include: ConTeXt.tabulate.pop-at-end/
    - include: ConTeXt.TABLE.pop-at-end/
    - include: ConTeXt.tables.cell.fonts
    - include: main

  ConTeXt.alt-TABLE.main/:
    - meta_content_scope: markup.other.table.context
    - match: '(\\)bT[CD]\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.alt-TABLE.cells/, generic.list*/]
    - include: ConTeXt.alt-TABLE.pop-at-end/
    - include: main
  ConTeXt.alt-TABLE.cells/:
    - match: ''
      set:
        - meta_content_scope: meta.other.table.cell.context
        - include: ConTeXt.alt-TABLE.pop-at-cell-end/
        - include: ConTeXt.alt-TABLE.pop-at-end/
        - include: ConTeXt.alt-TABLE.cell.fonts
        - include: main

  ConTeXt.alt-TABLE.pop-at-end/:
    - match: '(?=\\eTABLE\b)'
      pop: true
  ConTeXt.alt-TABLE.pop-at-cell-end/:
    - match: '(?=\\eT[CD]\b)'
      pop: true

  ConTeXt.list.template-or-name/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: ConTeXt.list.template-or-name.main/
  ConTeXt.list.template-or-name*/:
    - include: ConTeXt.list.template-or-name/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.template-or-name.main/:
    - include: generic.gobble-whitespace
    - match: '(?=[^\]]*\|)'
      set: ConTeXt.list.template.main/
    - match: ''
      set: generic.list.main/

  ConTeXt.list.template/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: ConTeXt.list.template.main/
  ConTeXt.list.template*/:
    - include: ConTeXt.list.template/
    - include: generic.pop-if-no-nearby-list/
  ConTeXt.list.template.main/:
    - meta_scope: meta.brackets.context
    - include: ConTeXt.list.template.keys
    - include: generic.pop-at-list-end/

  ConTeXt.list.template.keys:
    - match: '\|'
      scope: punctuation.separator.column.context
    - match: '[lcrx]'
      scope: entity.name.other.table.context
    - match: '[wp]'
      scope: entity.name.other.table.context
      push: generic.parens.with-dimensions*/
    - match: '([nNqQ])([[:digit:]]+)\.([[:digit:]]+) ' # space is deliberate
      captures:
        '1': entity.name.other.table.context
        '2': constant.numeric.integer.context
        '3': constant.numeric.integer.context
    - match: '([mM]|[BISRT])'
      scope: string.unquoted.table.context
    - match: '[f]'
      scope: string.unquoted.table.context
      push: generic.group*/
    - match: '([sojk])([[:digit:]])'
      captures:
        '1': support.function.table.context
        '2': constant.numeric.integer.context
    - match: '[sojk]'
      scope: support.function.table.context
      push: generic.group.with-integers*/
    - include: main

  ConTeXt.alt-TABLE.cell.fonts:
    - include: ConTeXt.alt-TABLE.cell.emphasis
    - include: ConTeXt.alt-TABLE.cell.boldface
    - include: ConTeXt.alt-TABLE.cell.italic
    - include: ConTeXt.alt-TABLE.cell.slanted
    - include: ConTeXt.alt-TABLE.cell.bold-italic
    - include: ConTeXt.alt-TABLE.cell.bold-slanted
    - include: ConTeXt.alt-TABLE.cell.sans-bold
    - include: ConTeXt.alt-TABLE.cell.typewriter
    - include: ConTeXt.alt-TABLE.cell.typewriter-bold

  ConTeXt.alt-TABLE.cell.emphasis:
    - match: '((\\)(emph|em))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.emphasis.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.boldface:
    - match: '((\\)(boldface|(small)?bold|bf(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.bold.boldface.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.italic:
    - match: '((\\)(italic|it(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.italic.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.slanted:
    - match: '((\\)((small)?slanted|sl(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.slanted.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.bold-italic:
    - match: '((\\)((small)?(bolditalic|italicbold)|bi(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.italic.context markup.bold.boldface.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.bold-slanted:
    - match: '((\\)((small)?(boldslanted|slantedbold)|bs(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.italic.slanted.context markup.bold.boldface.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.sans-bold:
    - match: '((\\)sansbold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.bold.boldface.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.typewriter:
    - match: '((\\)(mono|tt(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.raw.block.context # markup.raw.typewriter.context
        - include: ConTeXt.alt-TABLE.cell.main/
  ConTeXt.alt-TABLE.cell.typewriter-bold:
    - match: '((\\)monobold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set:
        - meta_content_scope: meta.other.table.cell.context markup.bold.boldface.context markup.raw.block.context # markup.raw.typewriter.context
        - include: ConTeXt.alt-TABLE.cell.main/

  ConTeXt.alt-TABLE.cell.main/:
    - include: ConTeXt.alt-TABLE.pop-at-cell-end/
    - include: ConTeXt.alt-TABLE.pop-at-end/
    - include: ConTeXt.alt-TABLE.cell.fonts
    - include: main

  TeX:
    - include: TeX.parameter

  TeX.parameter:
    - match: '(\#|\#{2}|\#{4}|\#{8}|\#{16}|\#{32}|\#{64})([[:digit:]]|[[:alpha:]]+|\{[[:alpha:]\s\.\-:_]+\})'
      scope: variable.parameter.context

  control:
    - include: control.word
    - include: control.symbol
    - include: control.active-character

  control.word:
    - include: control.word.without-generic
    - include: control.word.generic
  control.word.without-generic:
    - include: control.word.alignment
    - include: control.word.conditional

  control.word.alignment:
    - match: '(\\)(NB|[BCHNMR]C|ND|NG|[BCFHLMTV]L|CM|NN|[EHR]Q|[ACFHLMNS]R|CT)\b'
      captures:
        '0': keyword.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.list.adjacent*/

  control.word.conditional:
    - match: '(\\)(doif[[:alpha:]]*else|(if|[[:alpha:]]*doif(else)?)[[:alpha:]]*|[[:alpha:]]+(true|false)|or|else|fi)\b'
      captures:
        '0': keyword.control.conditional.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.lists-or-groups*/

  control.word.generic:
    - match: '(\\)[[:alpha:]]+'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.lists-or-groups*/

  control.word.generic.no-arguments:
    - match: '(\\)[[:alpha:]]+'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context

  control.symbol:
    - match: '(\\)[^[:alpha:]]'
      captures:
        '0': constant.other.symbol.context
        '1': punctuation.definition.backslash.context

  control.active-character:
    - match: '[|~]'
      scope: constant.other.active.context

  generic.pop-if-no-nearby-group/:
    - include: generic.pop-if-blank-line/
    - include: generic.gobble-whitespace
    - include: generic.pop-if-no-group/
  generic.pop-if-no-nearby-list/:
    - include: generic.pop-if-blank-line/
    - include: generic.gobble-whitespace
    - include: generic.pop-if-no-list/
  generic.pop-if-no-nearby-list-or-group/:
    - include: generic.pop-if-blank-line/
    - include: generic.gobble-whitespace
    - include: generic.pop-if-no-list-or-group/
  generic.pop-if-no-nearby-parens/:
    - include: generic.pop-if-blank-line/
    - include: generic.gobble-whitespace
    - include: generic.pop-if-no-parens/

  generic.pop-if-no-group/:
    - match: '(?=[^\{])'
      pop: true
  generic.pop-if-no-list/:
    - match: '(?=[^\[])'
      pop: true
  generic.pop-if-no-parens/:
    - match: '(?=[^\(])'
      pop: true
  generic.pop-if-no-list-or-group/:
    - match: '(?=[^\[\{])'
      pop: true
  generic.pop-if-blank-line/:
    - match: '(?=^\s*$\n?)'
      pop: true
  generic.pop-if-whitespace/:
    - match: '(?=\s)'
      pop: true
  generic.pop/:
    - match: ''
      pop: true

  generic.gobble-whitespace:
    - match: '\s+'

  generic.pop-at-group-end/:
    - match: '\}'
      scope: punctuation.section.braces.end.context
      pop: true
  generic.pop-at-list-end/:
    - match: '\]'
      scope: punctuation.section.brackets.end.context
      pop: true
  generic.pop-at-parens-end/:
    - match: '\)'
      scope: punctuation.section.parens.end.context
      pop: true
  generic.list.pop-at-end-of-assignment/:
    - include: generic.pop-at-comma/
    - match: '(?=\])'
      pop: true
  generic.group.pop-at-end-of-assignment/:
    - include: generic.pop-at-comma/
    - match: '(?=\})'
      pop: true
  generic.pop-at-comma/:
    - match: ','
      scope: punctuation.separator.comma.context
      pop: true
  generic.assignment.common:
    - match: ','
      scope: punctuation.separator.comma.context
    - match: '='
      scope: keyword.operator.assignment.context

  generic.group:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      push: generic.group.main/
  generic.group/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: generic.group.main/
  generic.group*/:
    - include: generic.group/
    - include: generic.pop-if-no-nearby-group/
  generic.groups*/:
    - include: generic.group
    - include: generic.pop-if-no-nearby-group/
  generic.group.main/:
    - meta_scope: meta.braces.context
    - include: generic.pop-at-group-end/
    - include: ConTeXt.group.font.toggle
    - include: main

  generic.group.with-integers/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: generic.group.with-integers.main/
  generic.group.with-integers*/:
    - include: generic.group.with-integers/
    - include: generic.pop-if-no-nearby-group/
  generic.group.with-integers.main/:
    - meta_scope: meta.braces.context
    - include: generic.integer
    - include: generic.group.main/

  generic.group.with-assignments/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: generic.group.with-assignments.main/
  generic.group.with-assignments*/:
    - include: generic.group.with-assignments/
    - include: generic.pop-if-no-nearby-group/
  generic.group.with-assignments.main/:
    - meta_scope: meta.braces.context
    - include: generic.group.assignments
    - include: generic.group.main/

  generic.list:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      push: generic.list.main/
  generic.list/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: generic.list.main/
  generic.list*/:
    - include: generic.list/
    - include: generic.pop-if-no-nearby-list/
  generic.lists*/:
    - include: generic.list
    - include: generic.pop-if-no-nearby-list/
  generic.list.main/:
    - meta_scope: meta.brackets.context
    - include: generic.pop-at-list-end/
    - include: generic.list.assignments
    - include: generic.dimension
    - include: main

  generic.list.adjacent*/:
    - include: generic.pop-if-whitespace/
    - include: generic.list/
    - include: generic.pop/

  generic.parens.with-dimensions/:
    - match: '\('
      scope: punctuation.section.parens.begin.context
      set: generic.parens.with-dimensions.main/
  generic.parens.with-dimensions*/:
    - include: generic.parens.with-dimensions/
    - include: generic.pop-if-no-nearby-parens/
  generic.parens.with-dimensions.main/:
    - meta_scope: meta.parens.context
    - include: generic.pop-at-parens-end/
    - include: generic.dimension
    - include: main

  generic.list-or-group:
    - include: generic.list
    - include: generic.group
  generic.lists-or-groups*/:
    - include: generic.list-or-group
    - include: generic.pop-if-no-nearby-list-or-group/

  generic.integer:
    - match: '[[:digit:]]+'
      scope: constant.numeric.context
  generic.real:
    - match: '([[:digit:]]+|[[:digit:]]*\.[[:digit:]]+)'
      scope: constant.numeric.context
  generic.dimension:
    - match: '([[:digit:]]+|[[:digit:]]*\.[[:digit:]]+)(pt|pc|in|bp|cm|mm|dd|cc|sp|em|ex)\b'
      captures:
        '1': constant.numeric.context
        '2': keyword.other.unit.context

  generic.list.assignments:
    - match: '\b(reference)(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context meta.other.reference.context
        - include: generic.list.pop-at-end-of-assignment/
        - include: main
    - match: '\b(title)(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context entity.name.headings.other.context meta.other.title.context
        - include: generic.list.pop-at-end-of-assignment/
        - include: main
    - match: '([[:alpha:][:digit:]\.\-:_]+)(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context
        - include: generic.list.pop-at-end-of-assignment/
        - include: generic.dimension
        - include: main
    - include: generic.assignment.common

  generic.group.assignments:
    - match: '([[:alpha:][:digit:]\.\-:_]+)(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context
        - include: generic.group.pop-at-end-of-assignment/
        - include: generic.dimension
        - include: main
    - include: generic.assignment.common
