%YAML 1.2
---
name: ConTeXt
file_extensions:
  - tex
  - mkii
  - mkiv
  - mkvi
  - mkix
  - mkxi
scope: text.tex.context
first_line_match: '^(%.*?macros\s*=\s*mk([vx]i|i[vx])|\s*\\(starttext|usemodule))\b'

contexts:
  prototype:
    - include: comment

  main:
    - include: math
    - include: Lua
    - include: MetaFun
    - include: templates
    - include: ConTeXt
    - include: TeX
    - include: control
    - include: generic.group

  comment:
    - include: comment.TeX

  comment.TeX:
    - match: '(%).*$\n?'
      captures:
        '0': comment.line.percentage.context
        '1': punctuation.definition.comment.context

  math:
   - include: math.display
   - include: math.inline

  math.display:
    - match: '\$\$'
      scope: punctuation.section.dollars.begin.context
      push:
        - meta_scope: meta.environment.math.block.context
        - match: '\$\$'
          scope: punctuation.section.dollars.end.context
          pop: true
        - include: math.main
    - match: '(\\)startformula\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        math.formula.core/,
        generic.list*/,
      ]
    - match: '(\\)start(display|d)math\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: meta.environment.math.block.context
        - match: '(?=\\stop\2math\b)'
          pop: true
        - include: math.main
    - match: '(\\)display(math|mathematics)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: math.display.group*/

  math.formula.core/:
    - match: ''
      set:
        - meta_content_scope: meta.environment.math.block.context
        - match: '(?=\\stopformula\b)'
          pop: true
        - include: math.main

  math.inline:
    - match: '\$'
      scope: punctuation.section.dollar.begin.context
      push:
        - meta_scope: meta.environment.math.inline.context
        - match: '\$'
          scope: punctuation.section.dollar.end.context
          pop: true
        - include: math.main
    - match: '(\\)(m|math|mathematics|formula)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        math.group*/,
        generic.list*/,
      ]
    - match: '(\\)inline(math|mathematics)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: math.group*/
    - match: '(\\)start(imath|mathmode)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: meta.environment.math.inline.context
        - match: '(?=\\stop\2\b)'
          pop: true
        - include: math.main

  math.group/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: math.group.core/
  math.group*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: math.group/
  math.group.core/:
    - meta_scope: meta.braces.context
    - meta_content_scope: meta.environment.math.inline.context
    - include: generic.pop-at-group-end/
    - include: math.main

  math.display.group/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: math.display.group.core/
  math.display.group*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: math.display.group/
  math.display.group.core/:
    - meta_scope: meta.braces.context
    - meta_content_scope: meta.environment.math.block.context
    - include: generic.pop-at-group-end/
    - include: math.main

  math.main:
    - include: Lua
    - include: templates
    - include: ConTeXt.verbatim
    - include: TeX.parameter
    - include: control.symbol
    - include: math.cases
    - include: math.inner-group
    - include: math.number
    - include: math.operator
    - include: math.variable
    - include: math.control.word
    - include: control.word.without-generic
    - include: control.word.generic.no-arguments

  math.control.word:
    - match: '(\\)text\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.group*/
    - match: '(\\)start[[:alpha:]]+'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.lists-or-groups*/

  math.cases:
    - match: '(\\)startcases\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        math.cases.core/,
        generic.list*/,
      ]

  math.cases.core/:
    - match: '(\\)stopcases\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      pop: true
    - include: math.cases.row
    - include: math.main

  math.cases.row:
    - match: '(\\)NC\b'
      captures:
        '0': entity.name.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: math.cases.row.column-one/

  math.cases.row.column-one/:
    - match: '(\\)NC\b'
      captures:
        '0': entity.name.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      set: math.cases.row.column-two.text/
    - match: '(\\)MC\b'
      captures:
        '0': entity.name.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      set: math.cases.row.column-two.math/
    - include: math.cases.pop-if-newrow/
    - include: math.main

  math.cases.row.column-two.text/:
    - include: math.cases.pop-if-newrow/
    - include: main
  math.cases.row.column-two.math/:
    - include: math.cases.pop-if-newrow/
    - include: math.main
  math.cases.pop-if-newrow/:
    - match: '(\\)NR\b'
      captures:
        '0': entity.name.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      set:
        - include: generic.pop-if-any-whitespace/
        - include: generic.list-or-group
        - include: generic.pop/

  math.number:
    - include: generic.real-or-integer
    - match: '∞'
      scope: constant.numeric.context
    - match: '(\\)infty\b'
      captures:
        '0': constant.other.math.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context

  math.operator:
    - match: '([\+\-\*/=\^_<>])'
      scope: keyword.operator.math.context
    - match: '[⋅±∓≤≥≃≈≠≡≅≢→∊∈∉∍∋∌⊂⊄⊃⊅⊆⊊⊈⊇⊋⊉]'
      scope: keyword.operator.math.context
    - match: '(\\)([lg]e(q?|qslant)|cdot|to|(n|not)?(in|ni)|n?su[bp]set(eq)?|su[bp]setneq|pm|mp|n?equiv|n?eq|cong|simeq|approx)\b'
      captures:
        '0': keyword.operator.math.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context

  math.variable:
    - match: '[[:alpha:]]'
      scope: variable.other.math.tex.context

  math.inner-group:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      push: math.inner-group.core/
  math.inner-group.core/:
    - meta_scope: meta.braces.context
    - include: generic.pop-at-group-end/
    - include: math.main

  Lua:
    - include: Lua.block
    - include: Lua.inline

  Lua.block:
    - match: '(\\)startluacode\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_include_prototype: false
        - meta_content_scope: source.lua.embedded.context
        - match: '(?=\\stopluacode\b)'
          pop: true
        - include: Lua.scope
    - match: '(\\)startlua\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - meta_content_scope: source.lua.minor.embedded.context
        - match: '(?=\\stoplua\b)'
          pop: true
        - include: Lua.scope

  Lua.inline:
    - match: '(\\)((ctx|direct)lua|cldcontext)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: Lua.inline.group*/

  Lua.inline.group/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context meta.braces.context
      set: Lua.inline.group.core/
  Lua.inline.group*/:
    - include: Lua.inline.group/
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
  Lua.inline.group.core/:
    - match: ''
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: source.lua.minor.embedded.context
        - match: '\}'
          scope: punctuation.section.braces.end.context
          pop: true
        - include: Lua.dummy-group
        - include: Lua.scope
  Lua.dummy-group:
    - match: '\{'
      push:
        - match: '\}'
          pop: true
        - include: Lua.dummy-group
        - include: Lua.scope

  Lua.scope:
    - include: control.symbol
    - include: control.word.generic
    - include: Lua.scope.comment.embed-friendly
    - include: scope:source.lua

  Lua.scope.comment.embed-friendly:
    - match: '--(?!\[\[)'
      scope: punctuation.definition.comment.lua
      push:
        - meta_scope: comment.line.double-dash.lua
        - match: '$\n?'
          pop: true

  MetaFun:
    - include: MetaFun.block
    - include: MetaFun.use

  MetaFun.use:
    - match: '(\\)(re)?useMPgraphic\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        generic.group-with-assignments*/,
        generic.group*/,
      ]

  MetaFun.block:
    - match: '(\\)startuniqueMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.uniqueMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startuniqueMPpagegraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.uniqueMPpagegraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startuseMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.useMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startusableMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.usableMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startreusableMPgraphic\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.reusableMPgraphic.core/, generic.group*/, generic.group*/]
    - match: '(\\)startstaticMPfigure\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.staticMPfigure.core/, generic.group*/]
    - match: '(\\)startMPcode\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPcode.core/, generic.group*/]
    - match: '(\\)startMPdefinitions\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPdefinitions.core/, generic.group*/]
    - match: '(\\)startMPinclusions\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPinclusions.core/, generic.group*/, generic.list*/]
    - match: '(\\)startMPpage\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [MetaFun.block.MPpage.core/, generic.list*/]

  MetaFun.block.MPcode.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPcode\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.MPpage.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPpage\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.uniqueMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopuniqueMPgraphic\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.uniqueMPpagegraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopuniqueMPpagegraphic\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.useMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopuseMPgraphic\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.usableMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopusableMPgraphic\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.reusableMPgraphic.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopreusableMPgraphic\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.staticMPfigure.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopstaticMPfigure\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.MPdefinitions.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPdefinitions\b)'
          pop: true
        - include: MetaFun.scope
  MetaFun.block.MPinclusions.core/:
    - match: ''
      set:
        - meta_content_scope: source.metapost.metafun.embedded.context
        - match: '(?=\\stopMPinclusions\b)'
          pop: true
        - include: MetaFun.scope

  MetaFun.scope:
    - include: Lua
    - include: control.symbol
    - include: control.word.generic
    - include: MetaFun.TeX
    - include: scope:source.metapost.metafun

  MetaFun.TeX:
    - match: '\b(b|verbatim)tex\b'
      scope: entity.name.other.tex.metapost
      push:
        - meta_content_scope: text.tex.context.embedded.metafun
        - match: '(?=\betex\b)'
          pop: true
        - include: main

  templates:
    - include: templates.snippets

  templates.snippets:
    - match: '(<\?)(lua)\b'
      captures:
        '1': punctuation.definition.tag.begin.context
        '2': entity.name.tag.lua.context
      push:
        - meta_include_prototype: false
        - meta_scope: meta.preprocessor.lua.context meta.tag.lua.context
        - meta_content_scope: source.lua.embedded.context
        - match: '\?>'
          scope: punctuation.definition.tag.end.context
          pop: true
        - include: templates.Lua.scope

  templates.Lua.scope:
    - include: templates.lua-functions
    - include: scope:source.lua

  templates.lua-functions:
    - match: '\b(inject)\b'
      scope: support.function.lua

  ConTeXt:
    - include: ConTeXt.tables
    - include: ConTeXt.headings
    - include: ConTeXt.verbatim
    - include: ConTeXt.setups
    # - include: ConTeXt.definitions
    - include: ConTeXt.quotes
    - include: ConTeXt.font

  ConTeXt.tables:
    - include: ConTeXt.tabulate

  ConTeXt.tabulate:
    - match: '(\\)start(tabulate|table)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        generic.list*/,
        ConTeXt.tabulate.list.name-or-template*/,
      ]
    - match: '(\\)(REF|ReFormat)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        generic.group*/,
        ConTeXt.tabulate.list.template*/,
      ]
    - match: '(\\)Use\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        generic.group*/,
        ConTeXt.tabulate.list.template*/,
        generic.group-with-numbers*/,
      ]

  ConTeXt.tabulate.parens/:
    - match: '\('
      scope: punctuation.section.parens.begin.context
      set: ConTeXt.tabulate.parens.number.core/
  ConTeXt.tabulate.parens*/:
    - include: generic.pop-if-blank-line/
    - match: '(?=[^\(])'
      pop: true
    - include: ConTeXt.tabulate.parens/
  ConTeXt.tabulate.parens.number.core/:
    - meta_scope: meta.parens.context
    - match: '\)'
      scope: punctuation.section.parens.end.context
      pop: true
    - include: generic.real-or-integer.dimension
    - include: main

  ConTeXt.tabulate.list.name-or-template/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: ConTeXt.tabulate.list.name-or-template.core/
  ConTeXt.tabulate.list.name-or-template*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list/
    - include: ConTeXt.tabulate.list.name-or-template/
  ConTeXt.tabulate.list.name-or-template.core/:
    - include: generic.gobble-whitespace
    - match: '(?=[^\]]*\|)'
      set: ConTeXt.tabulate.list.template.core/
    - match: ''
      set: ConTeXt.tabulate.list.name.core/

  ConTeXt.tabulate.list.name.core/:
    - meta_scope: meta.brackets.context
    - include: generic.pop-at-list-end/
    - include: main

  ConTeXt.tabulate.list.template/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: ConTeXt.tabulate.list.template.core/
  ConTeXt.tabulate.list.template*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list/
    - include: ConTeXt.tabulate.list.template/

  ConTeXt.tabulate.list.template.core/:
    - meta_scope: meta.brackets.context
    - include: generic.pop-at-list-end/
    - include: ConTeXt.tabulate.list.template.keys

  ConTeXt.tabulate.list.template.keys:
    - match: '\|'
      scope: punctuation.separator.column.context
    - match: '[lcrx]'
      scope: string.unquoted.table.context
    - match: '[wp]'
      scope: string.unquoted.table.context
      push: ConTeXt.tabulate.parens*/
    - match: '([nNqQ])([[:digit:]]+)\.([[:digit:]]+) ' # space is deliberate
      captures:
        '1': string.unquoted.table.context
        '2': constant.numeric.integer.context
        '3': constant.numeric.integer.context
    - match: '([mM]|[BISRT])'
      scope: constant.language.table.context
    - match: '[f]'
      scope: constant.language.table.context
      push: generic.group*/
    - match: '([sojk])([[:digit:]])'
      captures:
        '1': support.function.table.context
        '2': constant.numeric.integer.context
    - match: '[sojk]'
      scope: support.function.table.context
      push: generic.group-with-numbers*/
    - include: main

  ConTeXt.setups:
    - include: ConTeXt.setups.lua

  ConTeXt.setups.lua:
    - match: '(\\)startluasetups\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - include: generic.gobble-whitespace
        - match: '(?=\[)'
          set: [
            ConTeXt.setups.lua.core/,
            generic.list*/,
            generic.list*/,
          ]
        - match: ''
          set: [
            ConTeXt.setups.lua.core/,
            ConTeXt.setups.lua.name*/,
          ]

  ConTeXt.setups.lua.name*/:
    - match: '[[:alpha:][:digit:]\.\-:_]+'
      scope: meta.other.setup.name.context
      pop: true
    - include: generic.pop/

  ConTeXt.setups.lua.core/:
    - match: ''
      set:
        - meta_include_prototype: false
        - meta_content_scope: source.lua.embedded.context
        - match: '(?=\\stopluasetups\b)'
          pop: true
        - include: Lua.scope

  ConTeXt.headings:
    - include: ConTeXt.headings.inline
    - include: ConTeXt.headings.block

  ConTeXt.headings.inline:
    - match: '(\\)part\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.part.group*/, ConTeXt.headings.reference.list*/]
    - match: '(\\)(chapter|title)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.chapter.group*/, ConTeXt.headings.reference.list*/]
    - match: '(\\)(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.section.group*/, ConTeXt.headings.reference.list*/]
    - match: '(\\)sub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.subsection.group*/, ConTeXt.headings.reference.list*/]
    - match: '(\\)subsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.subsubsection.group*/, ConTeXt.headings.reference.list*/]
    - match: '(\\)subsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.subsubsubsection.group*/, ConTeXt.headings.reference.list*/]
    - match: '(\\)subsubsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.headings.subsubsubsubsection.group*/, ConTeXt.headings.reference.list*/]

  ConTeXt.headings.reference.list/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: ConTeXt.headings.reference.list.core/
  ConTeXt.headings.reference.list*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list/
    - include: ConTeXt.headings.reference.list/
  ConTeXt.headings.reference.list.core/:
    - meta_scope: meta.brackets.context
    - meta_content_scope: meta.other.reference.context
    - include: generic.pop-at-list-end/
    - include: main

  ConTeXt.headings.part.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.part.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/
  ConTeXt.headings.chapter.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.chapter.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/
  ConTeXt.headings.section.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.section.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/
  ConTeXt.headings.subsection.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.subsection.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/
  ConTeXt.headings.subsubsection.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.subsubsection.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/
  ConTeXt.headings.subsubsubsection.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.subsubsubsection.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/
  ConTeXt.headings.subsubsubsubsection.group*/:
    - include: ConTeXt.headings.group-common-1/
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: entity.name.headings.subsubsubsubsection.context meta.other.heading.context
        - include: ConTeXt.headings.group-common-2/

  ConTeXt.headings.group-common-1/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
  ConTeXt.headings.group-common-2/:
    - include: generic.pop-at-group-end/
    - include: ConTeXt.font.group-commands
    - include: main

  ConTeXt.headings.block:
    - match: '(\\)startpart\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.part.list*/]
    - match: '(\\)start(chapter|title)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.chapter.list*/]
    - match: '(\\)start(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.section.list*/]
    - match: '(\\)startsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.subsection.list*/]
    - match: '(\\)startsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.subsubsection.list*/]
    - match: '(\\)startsubsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.subsubsubsection.list*/]
    - match: '(\\)startsubsubsubsub(section|subject)\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [generic.list*/, ConTeXt.headings.subsubsubsubsection.list*/]

  ConTeXt.headings.part.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.part.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/
  ConTeXt.headings.chapter.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.chapter.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/
  ConTeXt.headings.section.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.section.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/
  ConTeXt.headings.subsection.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.subsection.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/
  ConTeXt.headings.subsubsection.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.subsubsection.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/
  ConTeXt.headings.subsubsubsection.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.subsubsubsection.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/
  ConTeXt.headings.subsubsubsubsection.list*/:
    - include: ConTeXt.headings.list-common-1/
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set:
        - meta_scope: meta.brackets.context
        - match: '\b(title)(=)'
          captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
          push:
            - meta_content_scope: meta.other.value.context entity.name.headings.subsubsubsubsection.context meta.other.heading.context
            - include: ConTeXt.headings.list-common-2/
        - include: ConTeXt.headings.list-common-3/

  ConTeXt.headings.list-common-1/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list/
  ConTeXt.headings.list-common-2/:
    - match: '(?=[\],])'
      pop: true
    - include: main
  ConTeXt.headings.list-common-3/:
    - include: generic.pop-at-list-end/
    - include: generic.list.assignments
    - include: generic.number
    - include: main

  ConTeXt.verbatim:
    - include: ConTeXt.verbatim.inline
    - include: ConTeXt.verbatim.block
    - include: ConTeXt.verbatim.buffer

  ConTeXt.verbatim.inline:
    - match: '(\\)type?\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.verbatim.inline.group-or-angles*/,
        generic.list*/,
      ]
    - match: '(\\)tex\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: ConTeXt.verbatim.inline.group*/

  ConTeXt.verbatim.inline.group-or-angles*/:
    - include: ConTeXt.verbatim.inline.group
    - include: ConTeXt.verbatim.inline.angles
    - include: generic.gobble-whitespace
    - match: '(?=[^\{<])'
      pop: true

  ConTeXt.verbatim.inline.group*/:
    - include: ConTeXt.verbatim.inline.group
    - include: generic.gobble-whitespace
    - include: generic.pop-if-no-group/

  ConTeXt.verbatim.inline.group:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: ConTeXt.verbatim.inline.group.core/
  ConTeXt.verbatim.inline.group.core/:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.block.context #markup.raw.inline.context
    - meta_scope: meta.braces.context
    - match: '\}'
      scope: punctuation.section.braces.end.context
      pop: true
    - include: ConTeXt.verbatim.inline.dummy-group

  ConTeXt.verbatim.inline.angles:
    - match: '<<'
      scope: punctuation.section.angles.begin.context
      set: ConTeXt.verbatim.inline.angles.core/
  ConTeXt.verbatim.inline.angles.core/:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.block.context #markup.raw.inline.context
    - meta_scope: meta.angles.context
    - match: '>>'
      scope: punctuation.section.angles.end.context
      pop: true
    - include: ConTeXt.verbatim.inline.dummy-angles

  ConTeXt.verbatim.inline.dummy-group:
    - match: '\{'
      push:
        - meta_include_prototype: false
        - match: '\}'
          pop: true
        - include: ConTeXt.verbatim.inline.dummy-group
  ConTeXt.verbatim.inline.dummy-angles:
    - match: '<<'
      push:
        - meta_include_prototype: false
        - match: '>>'
          pop: true
        - include: ConTeXt.verbatim.inline.dummy-angles

  ConTeXt.verbatim.block:
    - match: '(\\)starttyping\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.verbatim.block.main/,
        generic.list*/,
      ]
  ConTeXt.verbatim.block.main/:
    - match: ''
      set:
        - meta_include_prototype: false
        - meta_content_scope: markup.raw.block.context
        - match: '(?=\\stoptyping\b)'
          pop: true

  ConTeXt.verbatim.buffer:
    - match: '(\\)startbuffer\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.verbatim.buffer.main/,
        generic.list*/,
      ]
  ConTeXt.verbatim.buffer.main/:
    - match: ''
      set:
        - meta_include_prototype: false
        - meta_content_scope: meta.other.buffer.context
        - match: '(?=\\stopbuffer\b)'
          pop: true

  # ConTeXt.definitions:
  #   - include: ConTeXt.define
  #   - include: ConTeXt.texdef
  #
  # ConTeXt.define:
  #   - match: '(\\)define\b'
  #     captures:
  #       '0': storage.type.function.general.context meta.other.control.word.context
  #       '1': punctuation.definition.backslash.context
  #     push: ConTeXt.define.num*/
  #
  # ConTeXt.define.num*/:
  #   - meta_scope: meta.function.context
  #   - match: '(?=\[)'
  #     set: ConTeXt.define.num.core/
  #   - include: generic.gobble-whitespace
  #   - match: '(?=[^\[])'
  #     set: ConTeXt.define.name/
  #
  # ConTeXt.define.num.core/:
  #   - match: '\['
  #     scope: punctuation.section.brackets.begin.context
  #     set:
  #       - meta_scope: meta.brackets.context meta.function.parameters.context
  #       - match: '\]'
  #         scope: punctuation.section.brackets.end.context
  #         set: ConTeXt.define.name/
  #       - include: generic.integer
  #       - include: main
  #
  # ConTeXt.define.name/:
  #   - meta_content_scope: meta.function.context
  #   - match: '(\\)[[:alpha:]]+'
  #     captures:
  #       '0': entity.name.function.general.context meta.other.control.word.context
  #       '1': punctuation.definition.backslash.context
  #     set: ConTeXt.define.group/
  #   - match: '(\\)[^[:alpha:]]'
  #     captures:
  #       '0': entity.name.function.symbol.context
  #       '1': punctuation.definition.backslash.context
  #     set: ConTeXt.define.group/
  #   - match: '[^\s]'
  #     scope: entity.name.function.active.context
  #     set: ConTeXt.define.group/
  #
  # ConTeXt.define.group/:
  #   - meta_content_scope: meta.function.context
  #   - include: control.word.generic.no-arguments
  #   - include: control.symbol
  #   - include: control.active-character
  #   - include: TeX.def.group/
  #
  # ConTeXt.texdef:
  #   - match: '(\\)starttexdefinition\b'
  #     captures:
  #       '0': storage.type.function.general.context meta.other.control.word.context
  #       '1': punctuation.definition.backslash.context
  #     push: [
  #       ConTeXt.texdef.name/,
  #       ConTeXt.texdef.expanded*/,
  #       ConTeXt.texdef.unexpanded*/,
  #       ConTeXt.texdef.global*/,
  #       ConTeXt.texdef.spaces*/,
  #     ]
  #
  # ConTeXt.texdef.spaces*/:
  #   - match: '\b(no)?spaces\b'
  #     scope: storage.modifier.context
  #   - include: ConTeXt.texdef.common/
  # ConTeXt.texdef.global*/:
  #   - match: '\bglobal\b'
  #     scope: storage.modifier.context
  #   - include: ConTeXt.texdef.common/
  # ConTeXt.texdef.unexpanded*/:
  #   - match: '\bunexpanded\b'
  #     scope: storage.modifier.context
  #   - include: ConTeXt.texdef.common/
  # ConTeXt.texdef.expanded*/:
  #   - match: '\bexpanded\b'
  #     scope: storage.modifier.context
  #   - include: ConTeXt.texdef.common/
  #
  # ConTeXt.texdef.common/:
  #   - include: generic.gobble-whitespace
  #   - match: '(?=[^\s])'
  #     pop: true
  #
  # ConTeXt.texdef.name/:
  #   - meta_scope: meta.function.context
  #   - match: '[[:alpha:]]+'
  #     scope: entity.name.function.general.context
  #     set: ConTeXt.texdef.parameters/
  #
  # ConTeXt.texdef.parameters/:
  #   - meta_content_scope: meta.function.parameters.context
  #   - include: TeX.parameter
  #   - include: generic.gobble-whitespace
  #   - match: '$|(?=[^\s])'
  #     set: ConTeXt.texdef.main/
  #
  # ConTeXt.texdef.main/:
  #   - meta_content_scope: meta.function.context
  #   - match: '(\\)stoptexdefinition\b'
  #     captures:
  #       '0': meta.function.context storage.type.function.general.context meta.other.control.word.context
  #       '1': punctuation.definition.backslash.context
  #     pop: true
  #   - include: main
  #
  ConTeXt.quotes:
    - include: ConTeXt.quotes.inline
    - include: ConTeXt.quotes.block

  ConTeXt.quotes.inline:
    - match: '(\\)(quote|blockquote|quotation)\b'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: [
        ConTeXt.quotes.inline.group*/,
        generic.list*/,
      ]
  ConTeXt.quotes.inline.group*/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set:
        - meta_scope: meta.braces.context
        - meta_content_scope: markup.quote.inline.context
        - include: generic.pop-at-group-end/
        - include: main
    - include: generic.pop-if-no-group/

  ConTeXt.quotes.block:
    - match: '(\\)startblockquote\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.quotes.block.blockquote.main/, generic.list*/, generic.list*/]
    - match: '(\\)startquote\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.quotes.block.quote.main/, generic.list*/]
    - match: '(\\)startquotation\b'
      captures: {'0': support.function.general.context meta.other.control.word.context, '1': punctuation.definition.backslash.context}
      push: [ConTeXt.quotes.block.quotation.main/, generic.list*/, generic.list*/]

  ConTeXt.quotes.block.blockquote.main/:
    - match: ''
      set:
        - meta_content_scope: markup.quote.block.context
        - match: '(?=\\stopblockquote\b)'
          pop: true
        - include: main
  ConTeXt.quotes.block.quote.main/:
    - match: ''
      set:
        - meta_content_scope: markup.quote.block.context
        - match: '(?=\\stopquote\b)'
          pop: true
        - include: main
  ConTeXt.quotes.block.quotation.main/:
    - match: ''
      set:
        - meta_content_scope: markup.quote.block.context
        - match: '(?=\\stopquotation\b)'
          pop: true
        - include: main

  ConTeXt.font:
    - include: ConTeXt.font.commands

  ConTeXt.font.commands:
    - include: ConTeXt.font.command.emphasis
    - include: ConTeXt.font.command.boldface
    - include: ConTeXt.font.command.italic
    - include: ConTeXt.font.command.slanted
    - include: ConTeXt.font.command.bold-italic
    - include: ConTeXt.font.command.bold-slanted
    - include: ConTeXt.font.command.sans-bold
    - include: ConTeXt.font.command.typewriter
    - include: ConTeXt.font.command.typewriter-bold

  ConTeXt.font.command.emphasis:
    - match: '((\\)emph)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.emphasis.core/
  ConTeXt.font.command.boldface:
    - match: '((\\)(small)?bold)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '4': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.boldface.core/
  ConTeXt.font.command.italic:
    - match: '((\\)italic)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.italic.core/
  ConTeXt.font.command.slanted:
    - match: '((\\)(small)?slanted)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '4': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.slanted.core/
  ConTeXt.font.command.bold-italic:
    - match: '((\\)(small)?(bolditalic|italicbold))\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '5': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.bold-italic.core/
  ConTeXt.font.command.bold-slanted:
    - match: '((\\)(small)?(boldslanted|slantedbold))\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '5': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.bold-slanted.core/
  ConTeXt.font.command.sans-bold:
    - match: '((\\)sansbold)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.sans-bold.core/
  ConTeXt.font.command.typewriter:
    - match: '((\\)mono)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.typewriter.core/
  ConTeXt.font.command.typewriter-bold:
    - match: '((\\)monobold)\b\s*(\{)'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context, '3': meta.braces.context punctuation.section.braces.begin.context}
      push: ConTeXt.font.typewriter-bold.core/

  ConTeXt.font.emphasis.core/:
    - meta_content_scope: meta.braces.context markup.italic.emphasis.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.boldface.core/:
    - meta_content_scope: meta.braces.context markup.bold.boldface.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.italic.core/:
    - meta_content_scope: meta.braces.context markup.italic.italic.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.slanted.core/:
    - meta_content_scope: meta.braces.context markup.italic.slanted.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.bold-italic.core/:
    - meta_content_scope: meta.braces.context markup.italic.italic.context markup.bold.boldface.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.bold-slanted.core/:
    - meta_content_scope: meta.braces.context markup.italic.slanted.context markup.bold.boldface.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.sans-bold.core/:
    - meta_content_scope: meta.braces.context markup.bold.boldface.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.typewriter.core/:
    - meta_content_scope: meta.braces.context markup.raw.block.context # markup.raw.typewriter.context
    - include: ConTeXt.font.group.core/
  ConTeXt.font.typewriter-bold.core/:
    - meta_content_scope: meta.braces.context markup.raw.block.context markup.bold.boldface.context #markup.raw.typewriter.context
    - include: ConTeXt.font.group.core/

  ConTeXt.font.group.core/:
    - match: '\}'
      scope: meta.braces.context punctuation.section.braces.end.context
      pop: true
    - include: ConTeXt.font.group-commands
    - include: main

  ConTeXt.font.group-commands:
    - include: ConTeXt.font.group-command.emphasis
    - include: ConTeXt.font.group-command.boldface
    - include: ConTeXt.font.group-command.italic
    - include: ConTeXt.font.group-command.slanted
    - include: ConTeXt.font.group-command.bold-italic
    - include: ConTeXt.font.group-command.bold-slanted
    - include: ConTeXt.font.group-command.sans-bold
    - include: ConTeXt.font.group-command.typewriter
    - include: ConTeXt.font.group-command.typewriter-bold

  ConTeXt.font.group-command.emphasis:
    - match: '((\\)(emph|em))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.emphasis.core/
  ConTeXt.font.group-command.boldface:
    - match: '((\\)(boldface|(small)?bold|bf(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.boldface.core/
  ConTeXt.font.group-command.italic:
    - match: '((\\)(italic|it(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.italic.core/
  ConTeXt.font.group-command.slanted:
    - match: '((\\)((small)?slanted|sl(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.slanted.core/
  ConTeXt.font.group-command.bold-italic:
    - match: '((\\)((small)?(bolditalic|italicbold)|bi(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.bold-italic.core/
  ConTeXt.font.group-command.bold-slanted:
    - match: '((\\)((small)?(boldslanted|slantedbold)|bs(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.bold-slanted.core/
  ConTeXt.font.group-command.sans-bold:
    - match: '((\\)sansbold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.sans-bold.core/
  ConTeXt.font.group-command.typewriter:
    - match: '((\\)(mono|tt(xx|[xabcd])?))\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.typewriter.core/
  ConTeXt.font.group-command.typewriter-bold:
    - match: '((\\)monobold)\b(?=\s*[^\{])'
      captures: {'1': support.function.general.context meta.other.control.word.context, '2': punctuation.definition.backslash.context}
      set: ConTeXt.font.typewriter-bold.core/

  TeX:
    - include: TeX.parameter
    # - include: TeX.def

  TeX.parameter:
    - match: '(\#|\#{2}|\#{4}|\#{8}|\#{16}|\#{32}|\#{64})[[:digit:]]'
      captures:
        '0': variable.parameter.context
        # '1': punctuation.definition.variable.context
    - match: '(\#|\#{2}|\#{4}|\#{8}|\#{16}|\#{32}|\#{64})([[:alpha:]]+|\{[[:alpha:]\.\-:_]+\})'
      captures:
        '0': variable.parameter.context meta.preprocessor.context
        # '1': punctuation.definition.variable.context

  # TeX.def:
  #   - match: '(\\)[egx]?def\b'
  #     captures:
  #       '0': storage.type.function.general.context meta.other.control.word.context
  #       '1': punctuation.definition.backslash.context
  #     push: TeX.def.name/
  #
  # TeX.def.name/:
  #   - meta_scope: meta.function.context
  #   - match: '(\\)[[:alpha:]]+'
  #     captures:
  #       '0': entity.name.function.general.context meta.other.control.word.context
  #       '1': punctuation.definition.backslash.context
  #     set: TeX.def.parameters/
  #   - match: '(\\)[^[:alpha:]]'
  #     captures:
  #       '0': entity.name.function.symbol.context
  #       '1': punctuation.definition.backslash.context
  #     set: TeX.def.parameters/
  #   - match: '[^\s]'
  #     scope: entity.name.function.active.context
  #     set: TeX.def.parameters/
  #
  # TeX.def.parameters/:
  #   - meta_content_scope: meta.function.parameters.context
  #   - include: TeX.parameter
  #   - include: control.word.generic.no-arguments
  #   - include: control.symbol
  #   - include: control.active-character
  #   - match: '(?=\{)'
  #     set: TeX.def.group/
  #
  # TeX.def.group/:
  #   - match: '\{'
  #     scope: punctuation.section.braces.begin.context meta.function.context
  #     set: TeX.def.group.core/
  # TeX.def.group.core/:
  #   - meta_content_scope: meta.function.context
  #   - meta_scope: meta.braces.context
  #   - include: TeX.def.pop-at-group-end/
  #   - include: main
  #
  # TeX.def.pop-at-group-end/:
  #   - match: '\}'
  #     scope: meta.function.context punctuation.section.braces.end.context
  #     pop: true
  #
  control:
    - include: control.word
    - include: control.symbol
    - include: control.active-character

  control.word:
    - include: control.word.without-generic
    - include: control.word.generic

  control.word.without-generic:
    - include: control.word.alignment
    - include: control.word.conditional

  control.word.alignment:
    - match: '(\\)(NB|[BCHNMR]C|ND|NG|[BCFHLMTV]L|CM|NN|[EHR]Q|[ACFHLMNS]R)\b'
      captures:
        '0': entity.name.other.alignment.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push:
        - include: generic.pop-if-any-whitespace/
        - include: generic.list-or-group
        - include: generic.pop/

  control.word.conditional:
    - match: '(\\)(doif[[:alpha:]]*else|(if|[[:alpha:]]*doif(else)?)[[:alpha:]]*|[[:alpha:]]+(true|false)|or|else|fi)\b'
      captures:
        '0': keyword.control.conditional.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.lists-or-groups*/

  control.word.generic:
    - match: '(\\)[[:alpha:]]+'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context
      push: generic.lists-or-groups*/

  control.word.generic.no-arguments:
    - match: '(\\)[[:alpha:]]+'
      captures:
        '0': support.function.general.context meta.other.control.word.context
        '1': punctuation.definition.backslash.context

  control.symbol:
    - match: '(\\)[^[:alpha:]]'
      captures:
        '0': constant.other.symbol.context
        '1': punctuation.definition.backslash.context

  control.active-character:
    - match: '[|~]'
      scope: constant.other.active.context

  generic.pop-if-no-group/:
    - match: '(?=[^\{])'
      pop: true
  generic.pop-if-no-list/:
    - match: '(?=[^\[])'
      pop: true
  generic.pop-if-no-list-or-group/:
    - match: '(?=[^\[\{])'
      pop: true
  generic.pop-if-blank-line/:
    - match: '(?=^\s*$\n?)'
      pop: true
    - match: '\s+'
  generic.pop-if-any-whitespace/:
    - match: '\s+'
      pop: true
  generic.pop/:
    - match: ''
      pop: true

  generic.gobble-whitespace:
    - match: '\s+'

  generic.pop-at-group-end/:
    - match: '\}'
      scope: punctuation.section.braces.end.context
      pop: true
  generic.pop-at-list-end/:
    - match: '\]'
      scope: punctuation.section.brackets.end.context
      pop: true

  generic.group:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      push: generic.group.core/
  generic.group/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: generic.group.core/
  generic.group*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: generic.group/
  generic.groups*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: generic.group
  generic.group.core/:
    - meta_scope: meta.braces.context
    - include: generic.pop-at-group-end/
    - include: ConTeXt.font.group-commands
    - include: main

  generic.group-with-numbers/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: generic.group-with-numbers.core/
  generic.group-with-numbers*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: generic.group-with-numbers/
  generic.group-with-numbers.core/:
    - meta_scope: meta.braces.context
    - include: generic.pop-at-group-end/
    - include: generic.number
    - include: ConTeXt.font.group-commands
    - include: main

  generic.group-with-assignments:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      push: generic.group-with-assignments.core/
  generic.group-with-assignments/:
    - match: '\{'
      scope: punctuation.section.braces.begin.context
      set: generic.group-with-assignments.core/
  generic.group-with-assignments*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: generic.group-with-assignments/
  generic.groups-with-assignments*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-group/
    - include: generic.group-with-assignments
  generic.group-with-assignments.core/:
    - meta_scope: meta.braces.context
    - include: generic.group.assignments
    - include: generic.pop-at-group-end/
    - include: main

  generic.list:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      push: generic.list.core/
  generic.list/:
    - match: '\['
      scope: punctuation.section.brackets.begin.context
      set: generic.list.core/
  generic.list*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list/
    - include: generic.list/
  generic.lists*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list/
    - include: generic.list
  generic.list.core/:
    - meta_scope: meta.brackets.context
    - include: generic.pop-at-list-end/
    - include: generic.list.assignments
    - include: generic.number
    - include: main

  generic.list-or-group:
    - include: generic.list
    - include: generic.group
  generic.list-or-group/:
    - include: generic.list/
    - include: generic.group/
  generic.list-or-group*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list-or-group/
    - include: generic.list-or-group/
  generic.lists-or-groups*/:
    - include: generic.pop-if-blank-line/
    - include: generic.pop-if-no-list-or-group/
    - include: generic.list-or-group

  generic.number:
    - include: generic.real-or-integer.dimension
    - include: generic.real-or-integer

  generic.real-or-integer:
    - include: generic.real
    - include: generic.integer
  generic.real-or-integer.dimension:
    - include: generic.real.dimension
    - include: generic.integer.dimension

  generic.real:
    - match: '[[:digit:]]*\.[[:digit:]]+'
      scope: constant.numeric.float.context
  generic.real.dimension:
    - match: '([[:digit:]]*\.[[:digit:]]+)(pt|pc|in|bp|cm|mm|dd|cc|sp|em|ex)\b'
      captures:
        '1': constant.numeric.float.context
        '2': keyword.other.unit.context
  generic.integer:
    - match: '[[:digit:]]+'
      scope: constant.numeric.integer.context
  generic.integer.dimension:
    - match: '([[:digit:]]+)(pt|pc|in|bp|cm|mm|dd|cc|sp|em|ex)\b'
      captures:
        '1': constant.numeric.integer.context
        '2': keyword.other.unit.context

  generic.list.assignments:
    - match: '\b(reference)(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context meta.other.reference.context
        - include: generic.list.assignments.common/
    - match: '\b(title)(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context entity.name.headings.other.context
        - include: generic.list.assignments.common/
    - match: '\b([[:alpha:][:digit:]\.\-:_]+)?(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context
        - include: generic.list.assignments.common/
        - include: generic.number

  generic.list.assignments.common/:
    - match: '(?=[\],])'
      pop: true
    - include: main

  generic.group.assignments:
    - match: '\b([[:alpha:][:digit:]\.\-:_]+)?(=)'
      captures: {'1': variable.parameter.context, '2': keyword.operator.assignment.context}
      push:
        - meta_content_scope: meta.other.value.context
        - match: '(?=[\},])'
          pop: true
        - include: main
        - include: generic.number
