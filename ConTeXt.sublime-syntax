%YAML 1.2
---
name: ConTeXt
file_extensions:
  - tex
  - mkiv
  - mkvi
scope: text.tex.context

contexts:
  prototype:
    - include: comment

  main:
    - include: math
    - include: Lua
    - include: MetaFun
    - include: ConTeXt
    - include: TeX
    - include: control

  comment:
    - include: comment.TeX
    - include: comment.ConTeXt

  comment.TeX:
    - include: scope:text.tex#comments

  comment.ConTeXt:
    - match: '\\start(comment|hiding)(?=[^a-zA-Z]|$)'
      push:
        - meta_scope: comment.block.context
        - match: '\\stop\1(?=[^a-zA-Z]|$)'
          pop: true

  generic.stop/:
    - match: '(\\stop)(\2)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.stop.context
        '2': markup.heading.name.context
      pop: true

  math:
    - include: math.block
    - include: math.inline

  math.block:
    - match: '\$\$'
      scope: string.math-toggle.math.tex.context
      push:
        - meta_scope: math.tex.context
        - match: '\$\$'
          scope: string.math-toggle.math.tex.context
          pop: true
        - include: math.main
    - match: '(\\start)(formula)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push:
        - meta_scope: math.tex.context
        - include: generic.stop/
        - include: math.main

  math.inline:
    - match: '\$'
      scope: string.math-toggle.math.tex.context
      push:
        - meta_scope: math.tex.context
        - match: '\$'
          scope: string.math-toggle.math.tex.context
          pop: true
        - include: math.main
    - match: '\\(m|math|mathematics)(?=[^a-zA-Z]|$)'
      scope: support.function.control-word.context
      push: math.group/

  math.group:
    - match: '\{'
      push: math.group.core/
  math.group/:
    - match: '\{'
      set: math.group.core/
  math.group.core/:
    - meta_scope: math.tex.context
    - match: '\}'
      pop: true
    - include: math.main

  math.main:
    - include: Lua
    - include: math.constant
    - include: math.operator
    - include: math.text
    - include: math.group
    - include: math.control
    - match: '[^\[\](){}]'
      scope: string.math.tex.context

  math.constant:
    - include: scope:text.tex#math-numerics

  math.operator:
    - include: scope:text.tex#math-operators

  math.control:
    - include: control.word.tab
    - include: control.word.conditional
    - include: control.word.start-stop
    - match: '\\[a-zA-Z]+'
      scope: support.function.control-word.context
    - match: '\\[^a-zA-Z]'
      scope: constant.other.control-symbol.context

  math.text:
    - match: '(\\start)(intertext)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push:
        - include: generic.stop/
        - include: main
    - match: '\\text(?=[^a-zA-Z]|$)'
      scope: support.function.control-word.tex.context
      push: TeX.group/

  Lua:
    - include: Lua.inline
    - include: Lua.block

  Lua.block:
    - match: '(\\start)(lua)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push:
        - meta_include_prototype: false
        - meta_scope: source.lua.minor
        - include: generic.stop/
        - include: Lua.minor-block.main
    - match: '(\\start)(luacode)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push:
        - meta_include_prototype: false
        - meta_scope: source.lua.major
        - include: generic.stop/
        - include: Lua.major.main

  Lua.inline:
    - match: '\\(luaexpr|cldcontext|(ctx|direct|late)lua)(?=[^a-zA-Z]|$)'
      scope: support.function.control-word.context
      push: Lua.group/

  Lua.group/:
    - match: '\{'
      set: Lua.group.core/
  Lua.group.core/:
    - meta_include_prototype: false
    - meta_scope: source.lua.minor
    - match: '\}'
      pop: true
    - include: Lua.minor-inline.main

  Lua.major.main:
    - include: scope:source.lua

  Lua.minor-inline.main:
    - include: comment.TeX
    - include: Lua.minor-inline.comment
    - include: Lua.minor.string
    - include: scope:source.lua

  Lua.minor-block.main:
    - include: comment.TeX
    - include: Lua.minor-block.comment
    - include: Lua.minor.string
    - include: scope:source.lua

  Lua.minor.string:
    - match: ("|')
      push:
        - meta_scope: string.quoted.lua
        - match: '\1'
          pop: true
        - include: Lua.minor.string.escape
    - match: '(?<!--)\[(=*)\['
      push:
        - meta_scope: string.long.lua
        - match: '\]\1\]'
          pop: true
        - include: Lua.minor.string.escape
  Lua.minor.string.escape:
    - match: '\\([xX][0-9a-fA-F]{2}|u\{[0-9a-fA-F]{,7}\}|.)'
      scope: constant.character.escape.lua

  Lua.minor-inline.comment:
    - match: '--(?!\[\[)'
      push:
        - meta_scope: comment.line.double-dash.lua
        - match: '(?=\})'
          pop: true
        - include: Lua.minor-inline.comment.dummy-group
  Lua.minor-inline.comment.dummy-group:
    - match: '\{'
      push:
        - match: '\}'
          pop: true
        - include: Lua.minor-inline.comment.dummy-group

  Lua.minor-block.comment:
    - match: '--(?!\[\[)'
      push:
        - meta_scope: comment.line.double-dash.lua
        - match: '(?=\\stoplua([^a-zA-Z]|$))'
          pop: true

  MetaFun:
    - include: MetaFun.block

  MetaFun.block:
    - match: '(\\start)(MP(calculation|code|definitions|inclusions|page|run|positiongraphic)|(use|reusable|unique)MPgraphic|staticMPfigure)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push: [
        MetaFun.block.core/,
        TeX.groups*/,
      ]
  MetaFun.block.core/:
    - meta_include_prototype: false
    - meta_content_scope: source.metapost.metafun
    - include: generic.stop/
    - include: MetaFun.main

  MetaFun.main:
    - meta_include_prototype: false
    - include: MetaFun.ConTeXt
    - include: scope:source.metapost#types
    - include: MetaFun.constants
    - include: MetaFun.variables
    - include: MetaFun.labels
    - include: MetaFun.operators
    - include: MetaFun.functions
    - include: scope:source.metapost#definitions
    - include: scope:source.metapost#loops
    - include: MetaFun.environments
    - include: scope:source.metapost#comment
    - include: MetaFun.TeX

  MetaFun.environments:
    - match: '(?<=[^a-zA-Z_]|^)(Start|Stop)Page(?=[^a-zA-Z_]|$)'
      scope: support.class.metapost
    - include: scope:source.metapost#environments

  MetaFun.ConTeXt:
    - match: '\\(MP(betex|text|pos|anchor|var|color(only)?|options|transparency|string)|includeMPgraphic)(?=[^a-zA-Z]|$)'
      scope: support.function.control-word.context
      push: TeX.group/
    - include: control.word

  MetaFun.constants:
    - match: '(?<=[^a-zA-Z_]|^)(Page(Offset|Depth)|(Top|Back)Space|(Left|Right)(Edge|Margin)(Width|Distance)|(Top|Header|Footer|Bottom)(Height|Distance)|(Makeup|Text)(Height|Width)|(Print)?Paper(Height|Width)|BaseLineSkip|BodyFontSize|EmWidth|ExHeight|LineHeight|Overlay(Color|Depth|Height|Line(Color|Width)|Width)|Strut(Depth|Height)|fullsquare|(full|unit)diamond|[ul][lr]triangle|(unit|[btrl]|[ul][lr])circle|yellow)(?=[^a-zA-Z_]|$)'
      scope: constant.other.metapost.metafun
    - include: scope:source.metapost#constants

  MetaFun.variables:
    - match: '(?<=[^a-zA-Z_]|^)(ah(variant|dimple))(?=[^a-zA-Z_]|$)'
      scope: variable.parameter.internal.metapost.metafun
    - include: scope:source.metapost#variables

  MetaFun.labels:
    - match: '(?<=[^a-zA-Z_]|^)(textext|(thefree|free(dot)?)label)(\.(top|[ul]?(lft|rt)|bot|origin|raw))?(?=[^a-zA-Z_]|$)'
      scope: support.function.label.metapost.metafun
    - match: '(?<=[^a-zA-Z_]|^)(thelabel|(dot)?labels?)\.(origin|raw)(?=[^a-zA-Z_]|$)'
      scope: support.function.label.metapost.metafun
    - include: scope:source.metapost#labels

  MetaFun.operators:
    - match: '(?<=[^a-zA-Z_]|^)(along|(bottom|left|[ul][rl]|right|top)?enlarged|blownup|cornered|crossed|curved|laddered|paralleled|punked|random(ized|shifted)|shortened|smoothed|softened|stretched|squeezed|superellipsed|[ul][rl]moved|uncolored|withshade|[xy]shifted|([xy]|xy)sized|xyscaled)(?=[^a-zA-Z_]|$)'
      scope: keyword.operator.metapost.metafun
    - match: '-{3}'
      scope: keyword.path-operator.metapost.metafun
    - include: scope:source.metapost#operators

  MetaFun.functions:
    - match: '(?<=[^a-zA-Z_]|^)(addbackground|(cos|sin|cot|tan)|a(cos|sin|tan)|a?(cos|sin)h|(cot|tan)d|inv(cos|sin)|anglebetween|bbwidth|(bottom|top)boundary|boundingbox|cmyk|condition|d{2,3}ecimal|externalfigure|exp|graphictext|grayed|(inner|outer)boundingbox|inv(erted)?|(left|right|center|point)arrow|(left|right)boundary|loadfigure|ln|log|paired|re((map(ped)?)?color|setcolormap|draw|fill)|register|roundedsquare|simplified|sqr|tensecircle|transparent|tripled|unspiked)(?=[^a-zA-Z_]|$)'
      scope: support.function.metapost.metafun
    - include: scope:source.metapost#functions

  MetaFun.TeX:
    - meta_include_prototype: false
    - match: '(?<=[^a-zA-Z_]|^)(b|verbatim)(tex)(?=[^a-zA-Z_]|$)'
      scope: support.class.metapost.metafun
      push:
        - meta_scope: text.tex.context
        - match: '(?<=[^a-zA-Z_]|^)e\2(?=[^a-zA-Z_]|$)'
          scope: support.class.metapost.metafun
          pop: true
        - include: main

  ConTeXt:
    - include: ConTeXt.TABLE
    - include: ConTeXt.verbatim

  ConTeXt.TABLE:
    - match: '(\\b)(TABLE(head|next|body|foot)?|T([CXYHN]|[RD]s?))(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push: control.lists*/
    - match: '(\\e)(TABLE(head|next|body|foot)?|T([CXYHN]|[RD]s?))(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.stop.context
        '2': markup.heading.name.context

  ConTeXt.verbatim:
    - include: ConTeXt.verbatim.inline
    - include: ConTeXt.verbatim.block

  ConTeXt.verbatim.inline:
    - match: '\\type(?=[^a-zA-Z]|$)'
      scope: support.function.control-word.context
      push: ConTeXt.verbatim.group/
  ConTeXt.verbatim.group/:
    - match: '\{'
      set: ConTeXt.verbatim.group.core/
  ConTeXt.verbatim.group.core/:
    - meta_include_prototype: false
    - match: '\}'
      pop: true
    - include: ConTeXt.verbatim.dummy-group
  ConTeXt.verbatim.dummy-group:
    - match: '\{'
      push:
        - meta_include_prototype: false
        - match: '\}'
          pop: true
        - include: ConTeXt.verbatim.dummy-group

  ConTeXt.verbatim.block:
    - match: '(\\start)(typing|buffer)(?=[^a-zA-Z]|$)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push: [
        ConTeXt.verbatim.block.core/,
        control.lists*/,
      ]
  ConTeXt.verbatim.block.core/:
        - meta_include_prototype: false
        - include: generic.stop/

  TeX:
    - include: TeX.parameter
    - include: TeX.def
    - include: TeX.group

  TeX.parameter:
    - match: '(\#|\#{2}|\#{4}|\#{8}|\#{16}|\#{32}|\#{64})[1-9]'
      scope: variable.parameter.tex

  TeX.def:
    - match: '\\([egx]?def|let)(?=[^a-zA-Z]|$)'
      scope: keyword.control-word.tex
      push:
        - match: '\\[a-zA-Z]+'
          scope: entity.control-word.tex
          pop: true
        - match: '\\[^a-zA-Z]'
          scope: entity.control-symbol.tex
          pop: true

  TeX.group:
    - match: '\{'
      push: TeX.group.core/
  TeX.group/:
    - match: '\{'
      set: TeX.group.core/
  TeX.groups*/:
    - include: TeX.group
    - match: '(?=[^\s\{])'
      pop: true
  TeX.group.core/:
    - match: '\}'
      pop: true
    - include: main

  control:
    - include: control.word
    - include: control.symbol
    - include: control.active-character

  control.word:
    - include: control.word.font
    - include: control.word.tab
    - include: control.word.conditional
    - include: control.word.interface
    - include: control.word.start-stop
    - include: control.word.generic

  control.word.font:
    - match: '\\(em|(tf|it|sl|bf|bi|bs)(x{1,2}|[a-d])?|rm|ss|tt)(?=[^a-zA-Z]|$)'
      scope: entity.control-word.context

  control.word.tab:
    - match: '\\([FMLSNA]R|NC|[HFMLTBV]L)(?=[^a-zA-Z]|$)'
      scope: keyword.control-word.tab.context
      push: control.lists*/

  control.word.conditional:
    - match: '\\(if[a-zA-Z]*|[a-zA-Z]+(true|false)(?=[^a-zA-Z]|$)|(else|fi)(?=[^a-zA-Z]|$))'
      scope: keyword.control-word.context

  control.word.interface:
    - match: '(\\(?:define(?!(?=[^a-zA-Z]|$))|setup(?!s(?=[^a-zA-Z]|$))|use|get|place|complete))([a-zA-Z]*)'
      captures:
        '1': constant.other.control-word.context
        '2': support.function.control-word.context
      push: control.lists*/

  control.word.start-stop:
    - match: '(\\start)([a-zA-Z]*)'
      captures:
        '1': keyword.control-word.start.context
        '2': markup.heading.name.context
      push: control.lists*/
    - match: '(\\stop)([a-zA-Z]*)'
      captures:
        '1': keyword.control-word.stop.context
        '2': markup.heading.name.context

  control.word.generic:
    - match: '\\[a-zA-Z]+'
      scope: support.function.control-word.context
      push: control.lists*/

  control.symbol:
    - match: '\\[^a-zA-Z]'
      scope: constant.other.control-symbol.context

  control.active-character:
    - match: '[|~]'
      scope: constant.other.active-character.context

  control.list:
    - match: '\['
      push: control.list.core/
  control.lists*/:
    - include: control.list
    - match: '(?=[^\s\[])'
      pop: true
  control.list.core/:
    - match: '\]'
      pop: true
    - match: '([a-zA-Z-:]+)(=)'
      captures:
        '1': variable.parameter.key.context
        '2': keyword.operator.equals.context
    - include: main
