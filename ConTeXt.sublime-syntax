%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html for a good, albeit
# incomplete, explanation of how this syntax works.
name: ConTeXt
file_extensions: tex
scope: text.tex.context
# -----------------------------------------------------------------------------
# VARIABLES
# -----------------------------------------------------------------------------
# Variables are nice! In addition to the ones here, we also have some variables
# in syntax_pre_process.json - to reference them, simply type {{@var_name}}.
# Then the python preprocessor will replace them with the corresponding values.
variables:
  unit: '(pt|pc|in|bp|cm|mm|cc|sp|em|ex)' # valid TeX units
  uns_int: '\d+'
  uns_real: '(\d+\.\d*|\d*\.\d+)'
  uns_number: '({{uns_real}}|{{uns_int}})'
  number: '[\+\-]*{{uns_number}}'
  lua_context_functions: '(tex\.s?print)|context'
  tikz_keywords: '(in|at|grid|edge|node|rectangle|cycle|coordinate|decorate|controls|child)'
  tikz_math_operator: '([\+\-\*\/\^!><\?:]|[=><!]=|&&|\|\|)'
  tikz_math_function: '(abs|acos|add|and|array|asin|atan|atan2|bin|ceil|cos|cosec|cosh|cot|deg|depth|div|divide|e|equal|factorial|false|floor|frac|gcd|greater|height|hex|Hex|int|ifthenelse|iseven|isodd|isprime|less|ln|log10|log2|max|min|mod|Mod|multiply|neg|not|notequal|notgreater|notless|oct|or|pi|pow|rad|rand|random|real|rnd|round|sec|sin|sinh|sqrt|subtract|tan|tanh|true|veclen|width)'

# -----------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------
# A note on the naming convention I've been using for contexts:
#   * if it ends in a '/' then it pops off when (and only when) it finds a
#       match (what a 'match' means will depend on the particular context, but
#       e.g. 'group/' is looking to match something like '{...}')
#   * ending in '*/' means the same as '/', except that it will pop off if it
#       can't find any match - it is optional. (I wanted to use '?' for this
#       purpose, but it is not allowed in a context name)
#   * otherwise it never pops, it just remains at the current level of scope -
#       generally these are the ones intended for 'include'-ing (which you can
#       think of as just 'copy-paste'-ing that contexts code wherever the
#       include statement occurs)
# Oh, one more note: the characters that can be used in a context name are
# quite generous - you can use more of the ASCII character set than you'd
# expect! So I've been using '.' to pretend that I have namespaces, but don't
# be fooled, there is only the global namespace (as far as I know).
contexts:
  main:
  - include: TeX
  - include: lua
  - include: TikZ
  - include: math
  - include: ConTeXt
  - include: default

  prototype:
  - include: comments

  comments:
  # Because these matches are applied one line at a time, we can use this very
  # simple regex instead of something like '\%.*?$'.
  - match: '\%.*'
    scope: comment.tex

# -----------------------------------------------------------------------------
# TEX
# -----------------------------------------------------------------------------
  TeX:
  - include: TeX.def

  TeX.def:
  - match: '\\[egx]?def\b'
    scope: support.function.tex
    # Things are pushed onto the stack in the order they are written, so that
    # after this 'push', 'TeX.def.assignable/' will be on top of the stack,
    # with 'TeX.def.parameters*/' just below it and 'TeX.def.group/' below
    # that.
    push: [
      TeX.def.group/,
      TeX.def.parameters*/,
      TeX.def.assignable/,
    ]

  TeX.def.assignable/:
  # although usually you '\def' a control word, it is also possible to '\def' a
  # control symbol or an active character
  - match: '\\[a-zA-Z]+'
    scope: support.function.tex
    pop: true
  - match: '\\[^a-zA-Z]'
    scope: constant.other.tex
    pop: true
  - match: '[^\s]'
    scope: constant.other.tex
    pop: true

  TeX.def.parameters*/:
  - match: '\#([1-9]|(?=\{))'
    scope: variable.parameter.tex
  - match: '(?=\{)'
    pop: true

  # For completeness sake we have
  #   TeX.def.group
  #   TeX.def.group/
  #   TeX.def.group*/
  #   TeX.def.groups*/
  # although we only need one or two of these. It's nice and fairly easy to
  # provide them all though, so why not.
  TeX.def.group:
  - match: '\{'
    push: TeX.def.group.core/

  TeX.def.group/:
  - match: '\{'
    set: TeX.def.group.core/

  TeX.def.group*/:
  - include: TeX.def.group/
  - match: '(?=[^\s\{])'
    pop: true

  TeX.def.groups*/:
  - include: TeX.def.group
  - match: '(?=[^\s\{])'
    pop: true

  TeX.def.group.core/:
  - meta_scope: group.tex
  - match: '\}'
    pop: true
  - match: '\#[1-9]'
    scope: variable.parameter.tex
  # We need to make sure to handle nested groups {...} ourselves before main
  # does, so that we can highlight parameters '#n'. Thus we 'include'
  # TeX.def.group just before 'include'-ing main.
  - include: TeX.def.group
  - include: main

# -----------------------------------------------------------------------------
# LUA
# -----------------------------------------------------------------------------
  lua:
  - include: lua.inline
  - include: lua.block

  lua.inline:
  - match: '\\(directlua|ctxlua)\b'
    scope: support.function.tex
    push: lua.group/

  lua.block:
  - match: '(\\start)(lua(code)?)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push:
    # The '(\1)' references the first capture group of the match below it on
    # the stack (so in this case, it will simply refer to 'lua' or 'luacode').
    - match: '(\\stop)(\2)\b'
      captures:
        '1': support.function.tex
        '2': variable.parameter.tex
      pop: true
    - include: lua.main

  lua.main:
  - include: lua.group
  - include: lua.ConTeXt
  # This bit is where we include the default Lua syntax highlighting that
  # Sublime Text provides.
  - include: 'Packages/Lua/Lua.sublime-syntax'

  lua.ConTeXt:
  - match: '\b{{lua_context_functions}}\b'
    scope: support.function.lua

  lua.group:
  - match: '\{'
    push: lua.group.core/

  lua.group/:
  - match: '\{'
    set: lua.group.core/

  lua.group*/:
  - include: lua.group/
  - match: '(?=[^\s\{])'
    pop: true

  lua.groups*/:
  - include: lua.group
  - match: '(?=[^\s\{])'
    pop: true

  lua.group.core/:
  - meta_scope: lua.group.tex
  - match: '\}'
    pop: true
  - include: lua.main

# -----------------------------------------------------------------------------
# TIKZ
# -----------------------------------------------------------------------------
  TikZ:
  - include: TikZ.block
  - include: TikZ.inline

  TikZ.block:
  - match: '(\\start)(tikzpicture)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: [
      TikZ.block.core/,
      TikZ.lists*/,
    ]

  TikZ.block.core/:
  - meta_scope: tikz.tex
  - match: '(\\stop)(\2)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    pop: true
  - include: TikZ.main

  TikZ.inline:
  - match: '\\tikz\b'
    scope: support.function.tex
    push: [
      TikZ.inline.core/,
      TikZ.lists*/,
    ]

  TikZ.inline.core/:
  - meta_scope: tikz.tex
  - match: ';'
    scope: ''
    pop: true
  - include: TikZ.main

  TikZ.main:
  - include: TikZ.keyword
  - include: TikZ.scope
  - include: TikZ.group
  - include: TikZ.list
  - include: TikZ.calc
  - include: TeX
  - include: lua
  - include: math
  - include: ConTeXt
  - include: TikZ.default

  TikZ.calc:
  - match: '\(\$'
    scope: string.math.tex
    push: TikZ.calc.core/

  TikZ.calc.core/:
  - match: '\$\)'
    scope: string.math.tex
    pop: true
  - match: '{{tikz_math_operator}}'
    scope:  keyword.tex
  - match: '\b{{tikz_math_function}}\b'
    scope:  support.function.tex
  - match: '{{number}}\s*{{unit}}?'
    scope: constant.numeric.tex

  TikZ.keyword:
  - match: '\\foreach\b'
    scope: keyword.tex
  - match: '\b{{tikz_keywords}}\b'
    scope: keyword.tex

  TikZ.scope:
  - match: '(\\start)(scope)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
  - match: '(\\stop)(scope)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex

  TikZ.default:
  - match: '{{number}}\s*{{unit}}?'
    scope: constant.numeric.tex
  - match: '\\[a-zA-Z]+'
    scope: support.function.tex
  - match: '\\[^a-zA-Z]'
    scope: constant.other.tex
  - match: ';'
    scope: ''

  TikZ.group:
  - match: '\{'
    push: TikZ.group.core/

  TikZ.group.core/:
  - meta_scope: tikz.group.tex
  - include: TikZ.main
  - match: '\}'
    pop: true

  TikZ.list:
  - match: '\['
    push: TikZ.list.core/

  TikZ.lists*/:
  - include: TikZ.list
  - match: '(?=[^\s\[])'
    pop: true

  TikZ.list.core/:
  - meta_scope: tikz.list.tex
  - match: '\]'
    pop: true
  - include: TikZ.list.group
  - include: TikZ.options.core

  TikZ.list.group:
  - match: '\['
    push: TikZ.list.group.core/

  TikZ.list.group.core/:
  - meta_scope: tikz.group.tex
  - match: '\]'
    pop: true
  - include: TikZ.options.core

  TikZ.options.core:
  - match: '([a-zA-Z][a-zA-Z0-9\s\./\->]*)(=)'
    captures:
      '1': variable.parameter.tex
      '2': keyword.tex
  - match: '{{number}}\s*{{unit}}?'
    scope: constant.numeric.tex
  - match: '\\[a-zA-Z]+'
    scope: support.function.tex
  - match: '\\[^a-zA-Z]'
    scope: constant.other.tex
  - include: math

# -----------------------------------------------------------------------------
# MATH
# -----------------------------------------------------------------------------
  math:
  # It is important that math.display comes before math.inline, so that '$$'
  # gets interpreted as beginning TeX-style display math mode instead of
  # entering and immediately exiting TeX-style inline math mode. That said,
  # you really shouldn't be using $$...$$ (TeX-style display math) in ConTeXt.
  - include: math.displays
  - include: math.display
  - include: math.inline

  math.inline:
  - match: '\\(m|math|mathematics)\b'
    scope: support.function.tex
    push: math.group/
  - match: '(\$)'
    scope: string.math.tex
    push:
    - match: '(\1)'
      scope: string.math.tex
      pop: true
    - include: math.main

  math.display:
  - match: '(\\start)(formula)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push:
    - match: '(\\stop)(\2)\b'
      captures:
        '1': support.function.tex
        '2': variable.parameter.tex
      pop: true
    - include: math.main
  - match: '(\$\$)'
    scope: string.math.tex
    push:
    - match: '(\1)'
      scope: string.math.tex
      pop: true
    - include: math.main

  math.displays:
  - match: '(\\start)(formulas)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push:
    - match: '(\\stop)(\2)\b'
      captures:
        '1': support.function.tex
        '2': variable.parameter.tex
      pop: true
    - include: math.display

  math.main:
  # This context is the main workhorse of math highlighting.
  - include: math.align
  - include: math.cases
  - include: math.group
  - include: math.substack
  - include: math.text
  # Sure, why not include lua.inline, it can be nice to properly highlight an
  # inline Lua call.
  - include: lua.inline
  - include: math.default

  math.default:
  - match: '{{number}}'
    scope: constant.numeric.tex
  - match: '\\[a-zA-Z]+'
    scope: support.function.tex
  - match: '\\[^a-zA-Z]'
    scope: support.function.tex
  - include: default
    # This match is what makes plain text within math mode highlight like a
    # string
  - match: '.'
    scope: string.math.tex

  math.text:
  - match: '\\text\b'
    scope: support.function.tex
    push: default.group/
  - match: '(\\start)(intertext)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push:
    - match: '(\\stop)(\2)\b'
      captures:
        '1': support.function.tex
        '2': variable.parameter.tex
      pop: true
    - include: main

  math.substack:
  - match: '(\\start)(substack)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push:
    - match: '(\\stop)(\2)\b'
      captures:
        '1': support.function.tex
        '2': variable.parameter.tex
      pop: true
    - match: '\\NR\b'
      scope: keyword.tex
    - include: math.main

  math.cases:
  # This context is setup to match \startmathcases[optional square brackets,
  # pass some options] ... \stopmathcases, and between them it will match
  # rows: so highlight the first bit of a row '\NC ...' as math. The second bit
  # can be either '\NC ... \NR' or '\MC ... \NR', which will be highlighted as
  # text and math respectively (NC = new column and MC = math column).
  - match: '(\\start)(mathcases)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: [
      math.cases.core/,
      default.list*/,
    ]

  math.cases.core/:
  - match: '(\\stop)(\2)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    pop: true
  - match: '\\NC\b'
    scope: keyword.tex
    push: [
      math.cases.right/,
      math.cases.left/,
    ]

  math.cases.left/:
  - match: '(?=\\[NM]C\b)'
    pop: true
  - include: math.main

  math.cases.right/:
  - match: '\\NC\b'
    scope: keyword.tex
    set:
    - include: math.cases.right.core/
    - include: main
  - match: '\\MC\b'
    scope: keyword.tex
    set:
    - include: math.cases.right.core/
    - include: math.main

  math.cases.right.core/:
  - match: '\\NR\b'
    scope: keyword.tex
    pop: true

  math.align:
  - match: '(\\start)(align|mathalignment)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: [
      math.align.core/,
      default.list*/,
    ]

  math.align.core/:
  - match: '(\\stop)(\2)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    pop: true
  - match: '\\NC\b'
    scope: keyword.tex
  - match: '\\NR\b'
    scope: keyword.tex
  - include: math.main

  math.group:
  - match: '\{'
    push: math.group.core/

  math.group/:
  - match: '\{'
    set: math.group.core/

  math.group*/:
  - include: math.group/
  - match: '(?=[^\s\{])'
    pop: true

  math.groups*/:
  - include: math.group
  - match: '(?=[^\s\{])'
    pop: true

  math.group.core/:
  - meta_scope: math.group.tex
  - match: '\}'
    pop: true
  - include: math.main

# -----------------------------------------------------------------------------
# CONTEXT
# -----------------------------------------------------------------------------
# This section is devoted to matching syntax unique to ConTeXt
  ConTeXt:
  - include: ConTeXt.usemodule
  - include: ConTeXt.defs
  - include: ConTeXt.tables
  - include: ConTeXt.itemize
  - include: ConTeXt.default

  ConTeXt.default:
  - include: ConTeXt.default.start_stop
  - include: ConTeXt.default.define
  - include: ConTeXt.default.setup

  ConTeXt.default.define:
  - match: '(\\define)([a-zA-Z]+)'
    captures:
      '1': support.function.tex
      '2': support.function.tex
    push: default.lists*/

  ConTeXt.default.setup:
  - match: '(\\setup)([a-zA-Z]+)'
    captures:
      '1': support.function.tex
      '2': support.function.tex
    push: default.lists*/

  ConTeXt.default.start_stop:
  - match: '(\\start)([a-zA-Z]+)'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: default.lists*/
  - match: '(\\stop)([a-zA-Z]+)'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex

  ConTeXt.usemodule:
  - match: '\\usemodule\b'
    scope: keyword.tex
    push: ConTeXt.usemodule.list*/

  ConTeXt.usemodule.list*/:
  - match: '\['
    set: ConTeXt.usemodule.list.core/
  - match: '(?=[^\s\[])'
    pop: true

  ConTeXt.usemodule.list.core/:
  - meta_scope: list.tex
  - match: '\]'
    pop: true
  - match: '[a-zA-Z]+'
    scope: support.class.tex

  ConTeXt.defs:
  # Match some ConTeXt specific variations of '\def'
  - include: ConTeXt.texdef
  - include: ConTeXt.define

  ConTeXt.texdef:
  - match: '(\\start)(texdefinition)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: [
      ConTeXt.texdef.main/,
      ConTeXt.texdef.arguments*/,
      ConTeXt.texdef.name/,
      ConTeXt.texdef.prefixes*/,
    ]

  ConTeXt.texdef.prefixes*/:
  - match: '\b(global|(un)?expanded)\b'
    scope: constant.other.tex
  - match: '(?=[^\s])'
    pop: true

  ConTeXt.texdef.name/:
  - match: '[a-zA-Z]+'
    scope: support.function.tex
    pop: true

  ConTeXt.texdef.arguments*/:
  - match: '\#([1-9]|[a-zA-Z]+)'
    scope: variable.parameter.tex
  - match: '(?=[^\s])'
    pop: true

  ConTeXt.texdef.main/:
  # Inside a 'texdefinition', ConTeXt treats comments differently - now '%%'
  # denotes a comment, and '%' is just a literal percentage sign
  - meta_include_prototype: false
  - match: '(\\stop)(\2)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    pop: true
  - match: '\#([1-9]|[a-zA-Z]+)'
    scope: variable.parameter.tex
  - include: ConTeXt.texdef.comment
  - include: ConTeXt.texdef.group
  - include: main

  ConTeXt.texdef.comment:
  - meta_include_prototype: false
  - match: '\%\s*\%.*'
    scope: comment.tex

  ConTeXt.texdef.group:
  - meta_include_prototype: false
  - match: '\{'
    push: ConTeXt.texdef.group.core/

  ConTeXt.texdef.group.core/:
  - meta_include_prototype: false
  - meta_scope: group.tex
  - match: '\}'
    pop: true
  - match: '\#([1-9]|[a-zA-Z]+)'
    scope: variable.parameter.tex
  - include: ConTeXt.texdef.comment
  # Just like with TeX.def.group.core/, we have to make sure to intercept any
  # groups {...} before main gets to them, if we want to highlight parameters
  # '#n' inside nested groups
  - include: ConTeXt.texdef.group
  - include: main

  ConTeXt.define:
  - match: '\\define\b'
    scope: support.function.tex
    push: [
      TeX.def.group/,
      TeX.def.assignable/,
      ConTeXt.count.list*/,
    ]

  ConTeXt.itemize:
  - match: '(\\start)(itemize)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: default.lists*/
  - match: '(\\stop)(itemize)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
  - match: '\\(item|head)\b'
    scope: keyword.tex

  ConTeXt.tables:
  # ConTeXt has many ways to create tables (for historical reasons), some of
  # which are simply deprecated and others just have pros and cons. In fact
  # 'table's are deprecated, but I didn't know that before writing some (now
  # rather messy) support for them, so it's here now.
  #   Also included so far (with very very basic support) is the 'TABLE' way of
  # doings tables.
  - include: ConTeXt.table
  - include: ConTeXt.TABLE

  ConTeXt.TABLE:
  - match: '(\\b)(TABLE|T[RD])\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: default.lists*/
  - match: '(\\e)(TABLE|T[RD])\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex

  ConTeXt.table:
  - match: '(\\start)(table)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
    push: ConTeXt.table.spec.list*/
  - match: '(\\stop)(table)\b'
    captures:
      '1': support.function.tex
      '2': variable.parameter.tex
  - match: '\\[HV]L\b'
    scope: keyword.tex
  - match: '\\NC\b'
    scope: keyword.tex
  - match: '\\[FMLSNA]R\b'
    scope: keyword.tex
  - match: '\\Use\b'
    scope: support.function.tex
    push: [
      default.group/,
      ConTeXt.table.spec.list/,
      ConTeXt.count.group/,
    ]
  - match: '\\(REF|ReFormat)\b'
    scope: support.function.tex
    push: [
      default.group/,
      ConTeXt.table.spec.list/,
    ]

  ConTeXt.count.group/:
  - match: '\{'
    set: ConTeXt.count.group.core/

  ConTeXt.count.group.core/:
  - match: '\}'
    pop: true
  - match: '{{uns_int}}'
    scope: constant.numeric.tex

  ConTeXt.count.list*/:
  - match: '\['
    set: ConTeXt.count.list.core/
  - match: '(?=[^\s\[])'
    pop: true

  ConTeXt.count.list.core/:
  - match: '\]'
    pop: true
  - match: '{{uns_int}}'
    scope: constant.numeric.tex

  ConTeXt.table.spec.list:
  - match: '\['
    push: ConTeXt.table.spec.list.core/

  ConTeXt.table.spec.list/:
  - match: '\['
    set: ConTeXt.table.spec.list.core/

  ConTeXt.table.spec.list*/:
  - include: ConTeXt.table.spec.list/
  - match: '(?=[^\s\[])'
    pop: true

  ConTeXt.table.spec.lists*/:
  - include: ConTeXt.table.spec.list
  - match: '(?=[^\s\[])'
    pop: true

  ConTeXt.table.spec.list.core/:
  - meta_scope: table.list.tex
  - match: '\]'
    pop: true
  - include: ConTeXt.table.spec
  - include: main

  ConTeXt.table.spec:
  - match: '([lcrx])?([wp])\(({{number}})\)'
    captures:
      '1': keyword.tex
      '2': constant.other.tex
      '3': constant.numeric.tex
  - match: '[lcr]'
    scope: keyword.tex
  - match: '[BISRT]'
    scope: entity.tex
  - match: '[f]'
    scope: entity.tex
    push: default.group/
  - match: '[mM]'
    scope: string.tex
  - match: '[nN]{{uns_int}}\.{{uns_int}} '
    scope: constant.other.tex
  - match: '[qQ]{{uns_int}}\,{{uns_int}} '
    scope: constant.other.tex
  - match: '([soijk])(\{{{uns_int}}\}|\({{number}}{{unit}}\)|\d)'
    captures:
      '1': ''
      '2': constant.numeric.tex

# -----------------------------------------------------------------------------
# DEFAULT
# -----------------------------------------------------------------------------
# This section applies matches very broadly, and only gets the chance to match
# stuff if no other match has been found.
  default:
  - include: default.if
  - include: default.group
  - include: default.control_word
  - include: default.control_symbol

  default.if:
  - match: '\\(if[a-zA-Z]+|else|fi)\b'
    scope: keyword.tex

  default.control_symbol:
  - match: '\\[^a-zA-Z]'
    scope: constant.other.tex

  default.control_word:
  - match: '\\[a-zA-Z]+'
    scope: support.function.tex
    push: default.lists*/

  default.group:
  - match: '\{'
    push: default.group.core/

  default.group/:
  - match: '\{'
    set: default.group.core/

  default.group*/:
  - include: default.group/
  - match: '(?=[^\s\{])'
    pop: true

  default.groups*/:
  - include: default.group
  - match: '(?=[^\s\{])'
    pop: true

  default.group.core/:
  - meta_scope: group.tex
  - match: '\}'
    pop: true
  - include: main

  # I've taken to calling these 'lists', what they are is simply something
  # like '[...]'. That is, a square-bracket delimited thing. Inside the list,
  # we do some very simple matches, e.g. take care of key=value style syntax,
  # and finally (this bit is debatable) colour any leftover plain text as a
  # string.
  default.list:
  - match: '\['
    push: default.list.core/

  default.list/:
  - match: '\['
    set: default.list.core/

  default.list*/:
  - include: default.list/
  - match: '(?=[^\s\[])'
    pop: true

  default.lists*/:
  - include: default.list
  - match: '(?=[^\s\[])'
    pop: true

  default.list.core/:
  - meta_scope: list.tex
  - match: '\]'
    pop: true
  - match: '\,'
  - match: '{{number}}(\s*{{unit}})?'
    scope: constant.numeric.tex
  - match: '([a-zA-Z]+)(=)'
    captures:
      '1': variable.parameter.tex
      '2': keyword.tex
  - match: ':'
    scope: ''
  - include: main
  - match: '.'
    scope: ''
