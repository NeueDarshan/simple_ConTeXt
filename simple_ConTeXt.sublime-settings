{
  // The value should be one of the names in the
  // 'program_locations.PDF_viewers' option.
  "current.PDF/viewer": "evince",

  // Whether or not to attempt to autocomplete the name
  // of a buffer when encountering a command such as
  // '\typebuffer'. Valid options are `true` and
  // `false`.
  "current.buffer/on": true,

  // Extra options to pass to the 'context' process when
  // doing an auto-build. For example, to pass the
  // option '--mode=draft' you could do the following.
  //
  // ```json
  // {
  //   'current.builder/auto/extra_opts_for_ConTeXt': {
  //     'mode': {
  //       'draft': true
  //     }
  //   }
  // }
  // ```
  "current.builder/auto/extra_opts_for_ConTeXt": {
    "mode": {
      "draft": true,
    },
  },
  // Whether to rebuild on saving: `true` or `false`.
  "current.builder/auto/on": false,
  // Set to `true` or `false`.
  "current.builder/auto/open_PDF_after_build": false,
  // The options are `true`, `when_there_are_errors` and
  // `false`. If the global Sublime Text setting
  // 'show_panel_on_build' is set to 'false' then this
  // setting is ignored and the build panel is never
  // shown.
  "current.builder/auto/output/show": "when_there_are_errors",
  // Set to `true` or `false`; whether to show the
  // current ConTeXt path being used in the output
  // panel.
  "current.builder/auto/output/show_ConTeXt_path": false,
  // Set to `true` or `false`; whether to show any errors
  // in the output panel.
  "current.builder/auto/output/show_errors": true,
  // Set to `true` or `false`; whether to show any errors
  // inline directly in the source file. If the global
  // Sublime Text setting 'show_errors_inline' is set to
  // false then that overrides this and the errors will
  // *not* be shown inline regardless of this setting.
  "current.builder/auto/output/show_errors_inline": true,
  // Set to `true` or `false`; whether to show the full
  // command in the output panel.
  "current.builder/auto/output/show_full_command": false,
  // Should be `true` or `false`. TODO: implement this.
  "current.builder/auto/return_focus_after_open_PDF": true,

  // Set to `true` or `false`. Technical note: the
  // variable '$simple_context_open_pdf_after_build' in
  // the ConTeXt builder gets this value assigned to it.
  "current.builder/normal/open_PDF_after_build": true,
  // These options will be passed along to the 'context'
  // process. You can simply pass a string, like so.
  //
  // ```json
  // {
  //   'current.builder/normal/opts_for_ConTeXt':
  //     '--randomseed=42 --jit'
  // }
  // ```
  //
  // Alternatively, you can specify the options in a
  // more structured manner, and they will be translated
  // into command line options and then passed along to
  // 'context' in the same manner. The previous example
  // can be written in this style as follows.
  //
  // ```json
  // {
  //   'current.builder/normal/opts_for_ConTeXt': {
  //     'randomseed': 42,
  //     'jit': true
  //   }
  // }
  // ```
  //
  // TODO: talk more about the structured approach, and
  // improve the actual implementation.
  "current.builder/normal/opts_for_ConTeXt": {
    "autogenerate": true,
    "jit": false,
  },
  // The options are `true`, `when_there_are_errors` and
  // `false`. If the global Sublime Text setting
  // 'show_panel_on_build' is set to 'false' then this
  // setting is ignored and the build panel is never
  // shown.
  "current.builder/normal/output/show": true,
  // Set to `true` or `false`; whether to show the
  // current ConTeXt path being used in the output
  // panel.
  "current.builder/normal/output/show_ConTeXt_path": true,
  // Set to `true` or `false`; whether to show any errors
  // in the output panel.
  "current.builder/normal/output/show_errors": true,
  // Set to `true` or `false`; whether to show any errors
  // inline directly in the source file. If the global
  // Sublime Text setting 'show_errors_inline' is set to
  // 'false' then that overrides this and the errors will
  // *not* be shown inline regardless of this setting.
  "current.builder/normal/output/show_errors_inline": true,
  // Set to `true` or `false`; whether to show the full
  // command in the output panel.
  "current.builder/normal/output/show_full_command": false,
  // Whether to change window focus back to Sublime Text
  // after opening the PDF file at the end of a
  // successful build; `true` or `false`.
  //
  // TODO: implement this.
  "current.builder/normal/return_focus_after_open_PDF": true,

  // Same idea as the option
  // 'current.references/command_regex': to tell simple
  // ConTeXt that some extra commands function as
  // citation handlers (in addition to the usual
  // built-ins, e.g. '\cite'), you can give them as a
  // regular expression here.
  //
  // For example, something like the string
  // `[a-zA-Z]*cit(e|ation)[a-zA-Z]*` could do the trick
  // as a general purpose catch-all for new citation
  // commands. Alternatively, you can set the value as
  // `null` to ignore this option.
  "current.citations/command_regex": "[a-zA-Z]*cit(e|ation)[a-zA-Z]*",
  // Whether to bring up the list of bibliographic
  // entries upon typing in the start of a citation
  // command. For example, typing the sequence '\cite['
  // will trigger this. Can be `true` or `false`.
  "current.citations/on": true,
  // A description of what information to display about
  // each bibliographic entry. There are two options: use
  // a string where rows are separated by the indicator
  // '<>', or just use a list of strings. Fields are
  // indicated by Python-style braces '{field-name}'. The
  // first row is the most important one, as it is the one
  // we order the entries by and the one that is
  // searchable.
  "current.citations/format": [
    "{title}",
    "{author}",
    "{category}, {year}, {tag}",
  ],

  // Whether to show hyperlinks to file names in certain
  // curcumstances e.g. '\input knuth'. Should be `true`
  // or `false`.
  "current.file_links/on": true,

  // Whether to do 'key=value' style completions for
  // ConTeXt commands; should be `true` or `false`.
  "current.option_completions/on": true,

  // This should be one of the keys in the
  // 'program_locations.ConTeXt_paths' option.
  "current.path": "default",

  // Options are either a numeric value (I find 65 to be
  // a reasonable default) or `false` which turns
  // line-breaking off entirely.
  "current.pop_ups/line_break": 65,
  // Set to `true` or `false`. Controls whether or not
  // to align the equals signs in a key-value argument.
  "current.pop_ups/match_indentation": true,
  // Set to `true` or `false`. Suppose the value in a
  // key-value argument is too long to fit on a line of
  // length 'current.pop_ups/line_break'. When we break
  // it up, this controls whether to place additional
  // lines after the equals sign, or else simply at the
  // start of the new line.
  "current.pop_ups/hang_indentation": true,
  // Whether to show pop-ups when you hover over a
  // command name '\foo'. Should be `true` or `false`.
  "current.pop_ups/methods/on_hover": true,
  // Whether to show pop-ups when you type in a command
  // name '\foo'. Should be `true` or `false`.
  "current.pop_ups/methods/on_modified": true,
  // Whether to show an option to copy the contents of a
  // pop-up into the copy/paste clipboard. Occasionally
  // useful. Set to either `true` or `false`.
  "current.pop_ups/show_copy_pop_up": false,
  // Whether to show the source file in a pop-up for a
  // command '\foo'. If so, the source file is a
  // clickable link which will take you to that file,
  // and moreover to the exact definition site (assuming
  // we can find it). Set to `true` or `false`.
  "current.pop_ups/show_source_files": true,
  // Should be `true` or `false`. Controls whether or
  // not to try generating the interface files 'on
  // demand'. They can be 'demanded' when you hover over
  // a command if 'current.pop_ups/methods/on_hover' is
  // set to true, and when you start typing in a command
  // name '\foo' if
  // 'current.pop_ups/methods/on_modified' is true.
  "current.pop_ups/try_generate_on_demand": true,

  // We provide the reference functionality for the
  // usual built-ins ('\in', '\at', and so on) that do
  // referencing. But then what if you use
  // '\definereferenceformat' (or something else) to
  // define, say, '\eqref' as a new reference command:
  // how can we know to treat '\eqref' as a referencer?
  // Well, for now we keep it simple: any command whose
  // name is matched by this regular expression we
  // assume is a referencer.
  //
  // Should be a string; watch out for trouble with
  // string escaping.
  "current.references/command_regex": "[a-zA-Z]*ref",
  // Whether to bring up the list of references upon
  // typing in the start of a reference command. For
  // example, typing the sequence '\in[' will trigger
  // this. Can be `true` or `false`.
  "current.references/on": true,

  // When using the 'simple_ConTeXt: Run a ConTeXt
  // script' command in the Sublime Text palette, if the
  // process takes longer than this value to complete
  // then cancel it.
  //
  // Should be either a numeric value (in seconds), or
  // `false` to never time out.
  "current.script/timeout": 10,

  // The keys here are just names for a ConTeXt
  // installation, and the value should be the path to
  // the context binaries. For example: if you have the
  // context program located at
  // '/home/foo/context/tex/texmf-linux-64/bin/context'
  // (so the ConTeXt installation tree's root is at
  // '/home/foo/context/'), then you should write
  // something like
  //
  // ```json
  // {
  //   'program_locations.ConTeXt_paths': {
  //     'example':
  //       '/home/foo/context/tex/texmf-linux-64/bin'
  //   }
  // }
  // ```
  "program_locations.ConTeXt_paths": {
    "default": null,
  },
  // If the PDF viewer is on your 'PATH' environment
  // variable then you can just give its name;
  // otherwise, you must specify its full path. Some
  // example values are given by default.
  "program_locations.PDF_viewers": {
    "evince": "evince",
    "sumatra": "sumatraPDF",
    "skim": "skim",
  },

  // Each entry in this dictionary has a name to refer
  // to it by, and the value should be a dictionary to
  // merge and overwrite the current settings with. For
  // example, we could have the following.
  //
  // ```json
  // 'setting_groups': {
  //   'turn_references_on': {
  //     'references.on': true
  //   },
  //   'turn_references_off': {
  //     'references.on': false
  //   }
  // }
  // ```
  //
  // Then, suppose we ran the command 'simple_ConTeXt:
  // Quick change the settings' in the command palette
  // and selected the option called 'setting_groups'. We
  // would see options called 'turn_references_on' and
  // 'turn_references_off', and selecting either one of
  // them would change the current settings to turn
  // references on/off respectively.
  "setting_groups": {
    "verbose_builder_on": {
      "builder/normal/output/show_full_command": true,
      "builder/normal/output/show_ConTeXt_path": true,
    },
    "verbose_builder_off": {
      "builder/normal/output/show_full_command": false,
      "builder/normal/output/show_ConTeXt_path": false,
    },
  },
}
