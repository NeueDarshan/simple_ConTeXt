%YAML 1.2
---
name: ConTeXt log
file_extensions:
  - log
scope: text.log.context
contexts:
  main:
    - include: version
    - include: system

  version:
    - match: '^\s*(ConTeXt\s+ver:)\s*(.*?)\s*(current\s+fmt:)\s*(.*?)\s*(int:)\s*(.*)'
      captures:
        '1': support.function.version.log.context
        '2': constant.other.version.log.context
        '3': support.function.version.log.context
        '4': constant.other.version.log.context
        '5': support.function.version.log.context
        '6': constant.other.version.log.context

  system:
    - include: system.files-or-options
    - include: system.error
    - include: system.generic

  system.files-or-options:
    - match: '^\s*(used\s+(file|option))\s*(>)'
      captures:
        '1': entity.system.log.context
        '3': support.function.separator.log.context
      push: system.files.core/
  system.files.core/:
    - match: '([[:digit:]]+):'
      captures:
        '1': constant.numeric.log.context
    - match: '([[:word:].:-]+)\s*(=)'
      captures:
        '1': variable.parameter.key.log.context
        '2': keyword.equals.log.context
    - include: constants
    - match: '$'
      pop: true

  system.error:
    - include: system.error.tex
    - include: system.error.generic

  system.error.tex:
    - match: '^\s*(tex\s+error)\s*(>)'
      captures:
        '1': invalid.illegal.error.log.context
        '2': support.function.separator.log.context
      push: [
        system.error.tex.snippet/,
        system.error.tex.context/,
        system.error.tex.tail/,
      ]

  system.error.tex.tail/:
    - match: '$'
      pop: true

  system.error.tex.context/:
    - match: ''
      set: scope:text.tex.context
      with_prototype:
        - match: '^(?=\s*[[:digit:]]+\s*(>>)?\s*)'
          pop: true
        - match: '^\s*l\.\s*([[:digit:]]+)'
          captures:
            '1': constant.numeric.log.context
        - match: '^\s*(<)(.*?)(>)'
          captures:
            '1': variable.parameter.delimiter.log.context
            '2': keyword.name.log.context
            '3': variable.parameter.delimiter.log.context

  system.error.tex.snippet/:
    - match: ''
      set: system.error.tex.snippet.core/
  system.error.tex.snippet.core/:
    - match: '^\s*([[:digit:]]+)\s*(>>)?\s*'
      captures:
        '1': constant.numeric.log.context
        '2': invalid.illegal.error.log.context
      set: scope:text.tex.context
      with_prototype:
        - match: '^\s*([[:digit:]]+)\s*(>>)?\s*'
          captures:
            '1': constant.numeric.log.context
            '2': invalid.illegal.error.log.context
        - match: '(?=^\s*$)'
          pop: true
    - match: '(?=^.*?\S+)'
      pop: true

  system.error.generic:
    - match: '^\s*((\s*[[:word:].:-]+)+\s+error)\s*(>)'
      captures:
        '1': invalid.illegal.error.log.context
        '3': support.function.separator.log.context
      push: system.generic.tail/

  system.generic:
    - match: '^\s*((\s*[[:word:].:-]+)+)\s*(>)'
      captures:
        '1': entity.system.log.context
        '3': support.function.separator.log.context
      push: [
        system.generic.tail/,
        system.generic.repeat*/,
      ]
  system.generic.repeat*/:
    - match: '\s*((\s*[[:word:].:-]+)+)\s*(>)'
      captures:
        '1': entity.system.log.context
        '3': support.function.separator.log.context
      set: system.generic.repeat*/
    - match: ''
      pop: true
  system.generic.tail/:
    - include: constants
    - match: '$'
      pop: true

  constants:
    - match: '[[:digit:]]+|U\+\h+'
      scope: constant.numeric.log.context
    - match: (".*?"|'.*?')
      scope: string.log.context
