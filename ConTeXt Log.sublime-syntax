%YAML 1.2
---
name: ConTeXt Log
file_extensions:
  - log
scope: text.log.context

contexts:
  main:
    - include: snippet
    - include: system
    - include: comment # purely to enable \type{SYNTAX TEST}s

  snippet:
    - match: '^\s*([[:digit:]]+)\s*(>>)?'
      captures:
        '1': constant.numeric.log
        '2': invalid.illegal.log
      push: scope:text.tex.context
      with_prototype:
        - match: '^(?!\s*[[:digit:]])'
          pop: true
        - match: '^\s*([[:digit:]]+)\s*(>>)?'
          captures:
            '1': constant.numeric.log
            '2': invalid.illegal.log

  system:
    - include: system.error
    - include: system.generic

  system.error:
    - match: '^([[:alpha:][:digit:]\.\-:\s]+?error)\s*(>)'
      captures:
        '1': invalid.illegal.log
        '2': punctuation.separator.other.log support.function.other.log
      push: system.generic.repeat*/

  system.generic:
    - match: '^([[:alpha:][:digit:]\.\-:\s]+?)\s*(>)'
      captures:
        '1': entity.name.other.log
        '2': punctuation.separator.other.log support.function.other.log
      push: system.generic.repeat*/
  system.generic.repeat*/:
    - match: '([[:alpha:][:digit:]\.\-:\s]+?)\s*(>)'
      captures:
        '1': entity.name.other.log
        '2': punctuation.separator.other.log support.function.other.log
      set: system.generic.repeat*/
    - include: generic.gobble-whitespace
    - match: ''
      set:
        - include: generic.pop-if-line-end/
        - include: generic.assignments
        - include: constants

  constants:
    - include: constants.number
    - include: constants.string

  constants.number:
    - match: '([[:digit:]]+|[[:digit:]]*\.[[:digit:]]+)'
      scope: constant.numeric.log

  constants.string:
    - match: '"'
      scope: punctuation.definition.string.begin.log
      push:
        - meta_scope: string.quoted.double.log
        - match: '"'
          scope: punctuation.definition.string.end.log
          pop: true
        - match: '\n'
          # scope: invalid.illegal.unclosed-string.log
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.log
      push:
        - meta_scope: string.quoted.single.log
        - match: "'"
          scope: punctuation.definition.string.end.log
          pop: true
        - match: '\n'
          # scope: invalid.illegal.unclosed-string.log
          pop: true

  generic.gobble-whitespace:
    - match: '\s+'
  generic.pop/:
    - match: ''
      pop: true
  generic.pop-if-line-end/:
    - match: '(?=$)'
      pop: true
  generic.pop-if-whitespace/:
    - match: '(?=\s)'
      pop: true

  generic.assignments:
    - match: '([[:alpha:][:digit:]\.\-:_]+)\s*(=)'
      captures:
        '1': variable.parameter.log
        '2': keyword.operator.assignment.log
      push:
        - include: generic.pop-if-line-end/
        - include: generic.pop-if-whitespace/
        - include: constants

  comment:
    - match: '(%).*$\n?'
      captures:
        '0': comment.line.percentage.log
        '1': punctuation.definition.comment.log
